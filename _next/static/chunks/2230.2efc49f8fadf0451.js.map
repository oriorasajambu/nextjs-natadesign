{"version":3,"file":"static/chunks/2230.2efc49f8fadf0451.js","mappings":"0LAGA,SAAAA,GAAA,CACA,IAAAC,EAAsB,GAAAC,EAAAC,MAAA,EAAM,IAO5B,MANI,GAAAC,EAAAC,CAAA,EAAyB,KAC7BJ,EAAAK,OAAA,IACA,KACAL,EAAAK,OAAA,GACA,GACK,IACLL,CACA,uBELA,OAAAM,UAA8BL,EAAAM,SAAe,CAC7CC,wBAAAC,CAAA,EACA,IAAAC,EAAA,KAAAC,KAAA,CAAAC,QAAA,CAAAP,OAAA,CACA,GAAAK,GAAAD,EAAAI,SAAA,QAAAF,KAAA,CAAAE,SAAA,EACA,IAAAC,EAAA,KAAAH,KAAA,CAAAI,OAAA,CAAAV,OAAA,CACAS,EAAAE,MAAA,CAAAN,EAAAO,YAAA,IACAH,EAAAI,KAAA,CAAAR,EAAAS,WAAA,IACAL,EAAAM,GAAA,CAAAV,EAAAW,SAAA,CACAP,EAAAQ,IAAA,CAAAZ,EAAAa,UAAA,CACA,OACA,KAKAC,oBAAA,EACAC,QAAA,CACA,YAAAd,KAAA,CAAAe,QAAA,CAEA,CACA,SAAAC,EAAA,CAAoBD,SAAAA,CAAA,CAAAb,UAAAA,CAAA,CAAqB,EACzC,IAAAe,EAAe,GAAA3B,EAAA4B,KAAA,IACfC,EAAgB,GAAA7B,EAAAC,MAAA,EAAM,MACtBY,EAAiB,GAAAb,EAAAC,MAAA,EAAM,CACvBgB,MAAA,EACAF,OAAA,EACAI,IAAA,EACAE,KAAA,CACA,GAgCA,MAtBI,GAAArB,EAAA8B,kBAAA,EAAkB,KACtB,IAAgBb,MAAAA,CAAA,CAAAF,OAAAA,CAAA,CAAAI,IAAAA,CAAA,CAAAE,KAAAA,CAAA,EAA2BR,EAAAT,OAAA,CAC3C,GAAAQ,GAAA,CAAAiB,EAAAzB,OAAA,GAAAa,GAAA,CAAAF,EACA,OACAc,EAAAzB,OAAA,CAAA2B,OAAA,CAAAC,WAAA,CAAAL,EACA,IAAAM,EAAAC,SAAAC,aAAA,UAaA,OAZAD,SAAAE,IAAA,CAAAC,WAAA,CAAAJ,GACAA,EAAAK,KAAA,EACAL,EAAAK,KAAA,CAAAC,UAAA;+BACA,EAAiCZ,EAAG;;mBAEpC,EAAqBV,EAAM;oBAC3B,EAAsBF,EAAO;iBAC7B,EAAmBI,EAAI;kBACvB,EAAoBE,EAAK;;QAEzB,GAEA,KACAa,SAAAE,IAAA,CAAAI,WAAA,CAAAP,EACA,CACA,EAAK,CAAArB,EAAA,EACOZ,EAAAmC,aAAmB,CAAA9B,EAAA,CAAoBO,UAAAA,EAAAD,SAAAkB,EAAAf,QAAAD,CAAA,EAAsDb,EAAAyC,YAAkB,CAAAhB,EAAA,CAAaI,IAAAA,CAAA,GACxI,CC9DA,IAAAa,EAAA,EAAyBjB,SAAAA,CAAA,CAAAkB,QAAAA,CAAA,CAAA/B,UAAAA,CAAA,CAAAgC,eAAAA,CAAA,CAAAC,OAAAA,CAAA,CAAAC,sBAAAA,CAAA,CAAAC,KAAAA,CAAA,CAAoF,IAC7G,IAAAC,EAA6B,GAAAC,EAAAC,CAAA,EAAWC,GACxCxB,EAAe,GAAA3B,EAAA4B,KAAA,IACfwB,EAAoB,GAAApD,EAAAqD,OAAA,EAAO,MAC3B1B,GAAAA,EACAgB,QAAAA,EACA/B,UAAAA,EACAiC,OAAAA,EACAD,eAAA,IAEA,QAAAU,KADAN,EAAAO,GAAA,CAAAC,EAAA,IACAR,EAAAS,MAAA,IACA,IAAAH,EACA,OAEAV,GAAAA,GACA,EACAc,SAAA,IACAV,EAAAO,GAAA,CAAAC,EAAA,IACA,IAAAR,EAAAW,MAAA,CAAAH,GAEA,GAMAV,EAAAc,KAAAA,EAAA,CAAAhD,EAAA,EAiBA,MAhBI,GAAAZ,EAAAqD,OAAA,EAAO,KACXL,EAAAa,OAAA,EAAAC,EAAAC,IAAAf,EAAAO,GAAA,CAAAQ,EAAA,IACA,EAAK,CAAAnD,EAAA,EAKDZ,EAAAgE,SAAe,MACnB,GACAhB,EAAAnC,IAAA,GACA+B,GACAA,GACA,EAAK,CAAAhC,EAAA,EACL,cAAAmC,GACAtB,CAAAA,EAAmBzB,EAAAmC,aAAmB,CAACT,EAAQ,CAAId,UAAAA,CAAA,EAAsBa,EAAA,EAE7DzB,EAAAmC,aAAmB,CAAC8B,EAAAC,CAAA,CAAAC,QAAwB,EAAIC,MAAAhB,CAAA,EAAgB3B,EAC5E,EACA,SAAA0B,GAAA,CACA,WAAAkB,GACA,eE3CA,IAAAC,EAAA,GAAAC,EAAAR,GAAA,KAiDAS,EAAA,EAA2B/C,SAAAA,CAAA,CAAAoB,OAAAA,CAAA,CAAAF,QAAAA,EAAA,GAAAC,eAAAA,CAAA,CAAA6B,gBAAAA,CAAA,CAAA3B,sBAAAA,EAAA,GAAAC,KAAAA,EAAA,OAAiH,QDzD5I2B,EC2DAD,GACA1B,CAAAA,EAAA,QAOA,IAAA4B,EAAA,CAAwBC,UJjExB,CACA,IAAA7E,EAAsBD,IACtB,CAAA+E,EAAAC,EAAA,CAAsD,GAAA9E,EAAA+E,QAAA,EAAQ,GAC9DJ,EAAwB,GAAA3E,EAAAgF,WAAA,EAAW,KACnCjF,EAAAK,OAAA,EAAA0E,EAAAD,EAAA,EACA,EAAK,CAAAA,EAAA,EAKLI,EAAgC,GAAAjF,EAAAgF,WAAA,EAAW,IAAOE,EAAAC,EAAA,CAAAC,UAAe,CAAAT,GAAA,CAAAA,EAAA,EACjE,OAAAM,EAAAJ,EAAA,IIuDAQ,EAAmC,GAAArF,EAAAsF,UAAA,EAAWC,EAAAC,CAAkB,EAAAb,WAAA,CAChEU,GACAV,CAAAA,EAAAU,CAAA,EACA,IAAAtF,EAAsBD,IAEtB2F,EAAAC,SA1DAjE,CAAA,EACA,IAAAkE,EAAA,GAMA,OAJI3F,EAAA4F,QAAA,CAAA/B,OAAgB,CAAApC,EAAA,IACR,GAAAzB,EAAA6F,cAAA,EAActB,IAC1BoB,EAAAG,IAAA,CAAAvB,EACA,GACAoB,CACA,EAkDAlE,GACAsE,EAAAN,EACAO,EAAA,IAAAC,IAGAC,EAA4B,GAAAlG,EAAAC,MAAA,EAAM8F,GAElCI,EAAwB,GAAAnG,EAAAC,MAAA,EAAM,IAAAoE,KAAAjE,OAAA,CAG9BgG,EAA4B,GAAApG,EAAAC,MAAA,EAAM,IAWlC,GAVI,GAAAC,EAAAC,CAAA,EAAyB,KAC7BiG,EAAAhG,OAAA,IACAiG,SA7EA5E,CAAA,CAAA0E,CAAA,EACA1E,EAAAoC,OAAA,KACA,IAAAE,EAAAO,EAAAC,GACA4B,EAAA5C,GAAA,CAAAQ,EAAAQ,EACA,EACA,EAwEAkB,EAAAU,GACAD,EAAA9F,OAAA,CAAA2F,CACA,GDxFArB,ECyFoB,KACpB0B,EAAAhG,OAAA,IACA+F,EAAAG,KAAA,GACAN,EAAAM,KAAA,EACA,ED5FW,GAAAtG,EAAAgE,SAAA,EAAS,QAAAU,IAAA,IC6FpB0B,EAAAhG,OAAA,CACA,OAAgBJ,EAAAmC,aAAmB,CAACnC,EAAAuG,QAAc,MAAAR,EAAAS,GAAA,IAAyCxG,EAAAmC,aAAmB,CAACO,EAAa,CAAIqB,IAAAO,EAAAC,GAAA3D,UAAA,GAAA+B,QAAAA,EAAAA,GAAAiB,KAAAA,EAAAd,sBAAAA,EAAAC,KAAAA,CAAA,EAA0IwB,IAC1Q,CAEAwB,EAAA,IAAAA,EAAA,CAGA,IAAAU,EAAAP,EAAA9F,OAAA,CAAAoG,GAAA,CAAAlC,GACAoC,EAAAjB,EAAAe,GAAA,CAAAlC,GAEAqC,EAAAF,EAAAG,MAAA,CACA,QAAAC,EAAA,EAAoBA,EAAAF,EAAgBE,IAAA,CACpC,IAAA9C,EAAA0C,CAAA,CAAAI,EAAA,CACA,KAAAH,EAAAI,OAAA,CAAA/C,IACAiC,EAAAe,GAAA,CAAAhD,EAEA,OAGA,SAAAhB,GAAAiD,EAAAnF,IAAA,EACAkF,CAAAA,EAAA,IAIAC,EAAAnC,OAAA,KAEA,GAAA6C,KAAAA,EAAAI,OAAA,CAAA/C,GACA,OACA,IAAAQ,EAAA4B,EAAAa,GAAA,CAAAjD,GACA,IAAAQ,EACA,OACA,IAAA0C,EAAAR,EAAAK,OAAA,CAAA/C,GACAmD,EAAA,KACAf,EAAAxC,MAAA,CAAAI,GACAiC,EAAArC,MAAA,CAAAI,GAEA,IAAAoD,EAAAjB,EAAA9F,OAAA,CAAAgH,SAAA,IAAAC,EAAAtD,GAAA,GAAAA,GAGA,GAFAmC,EAAA9F,OAAA,CAAAkH,MAAA,CAAAH,EAAA,GAEA,CAAAnB,EAAAnF,IAAA,EAEA,GADAqF,EAAA9F,OAAA,CAAAqF,EACA1F,CAAA,IAAAA,EAAAK,OAAA,CACA,OACAuE,IACA/B,GAAAA,GACA,GAEAmD,EAAAuB,MAAA,CAAAL,EAAA,EAAmDjH,EAAAmC,aAAmB,CAACO,EAAa,CAAIqB,IAAAO,EAAAC,GAAA3D,UAAA,GAAAgC,eAAAsE,EAAArE,OAAAA,EAAAC,sBAAAA,EAAAC,KAAAA,CAAA,EAA6IwB,GACrO,GAGAwB,EAAAA,EAAAS,GAAA,KACA,IAAAzC,EAAAQ,EAAAR,GAAA,CACA,OAAAiC,EAAAuB,GAAA,CAAAxD,GAAAQ,EAA6CvE,EAAAmC,aAAmB,CAACO,EAAa,CAAIqB,IAAAO,EAAAC,GAAA3D,UAAA,GAAAkC,sBAAAA,EAAAC,KAAAA,CAAA,EAAoGwB,EAAA,GAO1KvE,EAAAmC,aAAmB,CAACnC,EAAAuG,QAAc,MAAAP,EAAAnF,IAAA,CAC9CkF,EACAA,EAAAS,GAAA,IAA0C,GAAAxG,EAAAyC,YAAA,EAAY8B,GAAA,CACtD,gBCrJe,SAASiD,EAAmB9G,CAAqB,CAAE,CAC9D,GAAM,CAAC+G,EAAUC,EAAY,CAAG3C,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IACzC,MACI,GAAA4C,EAAAC,GAAA,EAACpD,EAAeA,CAAC7B,QAAS,YAElB,GAAAgF,EAAAE,IAAA,EAACC,MAAAA,CACGC,UAAU,2CACV,GAAAJ,EAAAE,IAAA,EAACC,MAAAA,CAAIE,QAAS,IAAMN,EAAY,CAACD,GAAWM,UAAW,GAAsFrH,MAAAA,CAAnF+G,EAAW,OAAS,MAAM,CAAC,0DAAwEQ,MAAA,CAAhBvH,EAAMqH,SAAS,YAEpJrH,EAAMwH,QAAQ,CAAG,GAAAP,EAAAC,GAAA,EAACpC,IAAAA,CAAEuC,UAAU,mEAA2DrH,EAAMwH,QAAQ,CAAG,GAAK,IAAOxH,EAAMwH,QAAQ,CAAKxH,EAAMwH,QAAQ,GAAS,EAAE,CAEtK,GAAAP,EAAAC,GAAA,EAACpC,IAAAA,CAAEuC,UAAU,mEAA2DrH,EAAMyH,KAAK,GACnF,GAAAR,EAAAC,GAAA,EAACQ,EAAAA,CAAAA,CAAAA,GAAU,EAACL,UAAU,cAClBpF,QAAQ,YACR0F,QAAQ,OACRC,KAAK,YACLC,SAAU,CACNC,UAAW,CAAEC,OAAQhB,EAAW,EAAI,EAAE,EACtCiB,KAAM,CAAED,OAAQhB,EAAW,GAAK,CAAC,CACrC,EACAkB,WAAY,CAAEC,SAAU,EAAK,WAE7B,GAAAjB,EAAAC,GAAA,EAACiB,MAAAA,CAAIC,MAAM,6BAA6B7H,MAAM,QAAQF,OAAO,SAASgI,QAAQ,4BAC1E,GAAApB,EAAAC,GAAA,EAACoB,OAAAA,CAAKrH,GAAG,UAAUsH,YAAU,UAAUC,EAAE,mBAAmBC,UAAU,qCAAqCC,KAAK,OAAOC,OAAO,UAAUC,YAAY,aAIhK,GAAA3B,EAAAE,IAAA,EAACO,EAAAA,CAAAA,CAAAA,GAAU,EAACzF,QAAQ,YAChB0F,QAAQ,OACRC,KAAK,YACLC,SAAU,CACNC,UAAW,CAAEe,QAAS9B,EAAW,EAAI,CAAC,CAAE1G,OAAQ0G,EAAW,EAAI,MAAM,EACrEiB,KAAM,CAAEa,QAAS9B,EAAW,EAAI,CAAC,CAAE1G,OAAQ0G,EAAW,OAAS,CAAC,CACpE,EACAkB,WAAY,CAAEC,SAAU,CAAE,EAAGb,UAAW,oGAA2HE,MAAA,CAAvBvH,EAAM8I,gBAAgB,YAE9J9I,EAAMwH,QAAQ,CAAG,GAAAP,EAAAC,GAAA,EAACpC,IAAAA,CAAEuC,UAAU,gEAAuD,OAAS,EAAE,CAEpG,GAAAJ,EAAAC,GAAA,EAACpC,IAAAA,CAAEuC,UAAU,0CACRrH,EAAMe,QAAQ,GAEnB,GAAAkG,EAAAC,GAAA,EAACiB,MAAAA,CAAIC,MAAM,6BAA6Bf,UAAU,YAAY9G,MAAM,QAAQF,OAAO,SAASgI,QAAQ,4BAChG,GAAApB,EAAAC,GAAA,EAACoB,OAAAA,CAAKrH,GAAG,UAAUsH,YAAU,UAAUC,EAAE,mBAAmBC,UAAU,qCAAqCC,KAAK,OAAOC,OAAO,UAAUC,YAAY,eAOhL","sources":["webpack://_N_E/./node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/use-force-update.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs","webpack://_N_E/./src/components/common/AccordionComponent.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { useRef } from 'react';\nimport { useIsomorphicLayoutEffect } from './use-isomorphic-effect.mjs';\n\nfunction useIsMounted() {\n    const isMounted = useRef(false);\n    useIsomorphicLayoutEffect(() => {\n        isMounted.current = true;\n        return () => {\n            isMounted.current = false;\n        };\n    }, []);\n    return isMounted;\n}\n\nexport { useIsMounted };\n","import { sync } from '../frameloop/index.mjs';\nimport { useState, useCallback } from 'react';\nimport { useIsMounted } from './use-is-mounted.mjs';\n\nfunction useForceUpdate() {\n    const isMounted = useIsMounted();\n    const [forcedRenderCount, setForcedRenderCount] = useState(0);\n    const forceRender = useCallback(() => {\n        isMounted.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [forcedRenderCount]);\n    /**\n     * Defer this to the end of the next animation frame in case there are multiple\n     * synchronous calls.\n     */\n    const deferredForceRender = useCallback(() => sync.postRender(forceRender), [forceRender]);\n    return [deferredForceRender, forcedRenderCount];\n}\n\nexport { useForceUpdate };\n","import * as React from 'react';\nimport { useId, useRef, useInsertionEffect } from 'react';\n\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */\nclass PopChildMeasure extends React.Component {\n    getSnapshotBeforeUpdate(prevProps) {\n        const element = this.props.childRef.current;\n        if (element && prevProps.isPresent && !this.props.isPresent) {\n            const size = this.props.sizeRef.current;\n            size.height = element.offsetHeight || 0;\n            size.width = element.offsetWidth || 0;\n            size.top = element.offsetTop;\n            size.left = element.offsetLeft;\n        }\n        return null;\n    }\n    /**\n     * Required with getSnapshotBeforeUpdate to stop React complaining.\n     */\n    componentDidUpdate() { }\n    render() {\n        return this.props.children;\n    }\n}\nfunction PopChild({ children, isPresent }) {\n    const id = useId();\n    const ref = useRef(null);\n    const size = useRef({\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n    });\n    /**\n     * We create and inject a style block so we can apply this explicit\n     * sizing in a non-destructive manner by just deleting the style block.\n     *\n     * We can't apply size via render as the measurement happens\n     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n     * styles directly on the DOM node, we might be overwriting\n     * styles set via the style prop.\n     */\n    useInsertionEffect(() => {\n        const { width, height, top, left } = size.current;\n        if (isPresent || !ref.current || !width || !height)\n            return;\n        ref.current.dataset.motionPopId = id;\n        const style = document.createElement(\"style\");\n        document.head.appendChild(style);\n        if (style.sheet) {\n            style.sheet.insertRule(`\n          [data-motion-pop-id=\"${id}\"] {\n            position: absolute !important;\n            width: ${width}px !important;\n            height: ${height}px !important;\n            top: ${top}px !important;\n            left: ${left}px !important;\n          }\n        `);\n        }\n        return () => {\n            document.head.removeChild(style);\n        };\n    }, [isPresent]);\n    return (React.createElement(PopChildMeasure, { isPresent: isPresent, childRef: ref, sizeRef: size }, React.cloneElement(children, { ref })));\n}\n\nexport { PopChild };\n","import * as React from 'react';\nimport { useId, useMemo } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { PopChild } from './PopChild.mjs';\n\nconst PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode, }) => {\n    const presenceChildren = useConstant(newChildrenMap);\n    const id = useId();\n    const context = useMemo(() => ({\n        id,\n        initial,\n        isPresent,\n        custom,\n        onExitComplete: (childId) => {\n            presenceChildren.set(childId, true);\n            for (const isComplete of presenceChildren.values()) {\n                if (!isComplete)\n                    return; // can stop searching when any is incomplete\n            }\n            onExitComplete && onExitComplete();\n        },\n        register: (childId) => {\n            presenceChildren.set(childId, false);\n            return () => presenceChildren.delete(childId);\n        },\n    }), \n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    presenceAffectsLayout ? undefined : [isPresent]);\n    useMemo(() => {\n        presenceChildren.forEach((_, key) => presenceChildren.set(key, false));\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    React.useEffect(() => {\n        !isPresent &&\n            !presenceChildren.size &&\n            onExitComplete &&\n            onExitComplete();\n    }, [isPresent]);\n    if (mode === \"popLayout\") {\n        children = React.createElement(PopChild, { isPresent: isPresent }, children);\n    }\n    return (React.createElement(PresenceContext.Provider, { value: context }, children));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n","import { useEffect } from 'react';\n\nfunction useUnmountEffect(callback) {\n    return useEffect(() => () => callback(), []);\n}\n\nexport { useUnmountEffect };\n","import * as React from 'react';\nimport { useContext, useRef, cloneElement, Children, isValidElement } from 'react';\nimport { useForceUpdate } from '../../utils/use-force-update.mjs';\nimport { useIsMounted } from '../../utils/use-is-mounted.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { useUnmountEffect } from '../../utils/use-unmount-effect.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\n\nconst getChildKey = (child) => child.key || \"\";\nfunction updateChildLookup(children, allChildren) {\n    children.forEach((child) => {\n        const key = getChildKey(child);\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    const filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, (child) => {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode = \"sync\", }) => {\n    // Support deprecated exitBeforeEnter prop\n    if (exitBeforeEnter) {\n        mode = \"wait\";\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, \"Replace exitBeforeEnter with mode='wait'\");\n        }\n    }\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    let [forceRender] = useForceUpdate();\n    const forceRenderLayoutGroup = useContext(LayoutGroupContext).forceRender;\n    if (forceRenderLayoutGroup)\n        forceRender = forceRenderLayoutGroup;\n    const isMounted = useIsMounted();\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    const filteredChildren = onlyElements(children);\n    let childrenToRender = filteredChildren;\n    const exiting = new Set();\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    const presentChildren = useRef(childrenToRender);\n    // A lookup table to quickly reference components by key\n    const allChildren = useRef(new Map()).current;\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    const isInitialRender = useRef(true);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        updateChildLookup(filteredChildren, allChildren);\n        presentChildren.current = childrenToRender;\n    });\n    useUnmountEffect(() => {\n        isInitialRender.current = true;\n        allChildren.clear();\n        exiting.clear();\n    });\n    if (isInitialRender.current) {\n        return (React.createElement(React.Fragment, null, childrenToRender.map((child) => (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child)))));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    childrenToRender = [...childrenToRender];\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    const presentKeys = presentChildren.current.map(getChildKey);\n    const targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    const numPresent = presentKeys.length;\n    for (let i = 0; i < numPresent; i++) {\n        const key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1) {\n            exiting.add(key);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (mode === \"wait\" && exiting.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exiting.forEach((key) => {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        const child = allChildren.get(key);\n        if (!child)\n            return;\n        const insertionIndex = presentKeys.indexOf(key);\n        const onExit = () => {\n            allChildren.delete(key);\n            exiting.delete(key);\n            // Remove this child from the present children\n            const removeIndex = presentChildren.current.findIndex((presentChild) => presentChild.key === key);\n            presentChildren.current.splice(removeIndex, 1);\n            // Defer re-rendering until all exiting children have indeed left\n            if (!exiting.size) {\n                presentChildren.current = filteredChildren;\n                if (isMounted.current === false)\n                    return;\n                forceRender();\n                onExitComplete && onExitComplete();\n            }\n        };\n        childrenToRender.splice(insertionIndex, 0, React.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map((child) => {\n        const key = child.key;\n        return exiting.has(key) ? (child) : (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\n    });\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        childrenToRender.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    return (React.createElement(React.Fragment, null, exiting.size\n        ? childrenToRender\n        : childrenToRender.map((child) => cloneElement(child))));\n};\n\nexport { AnimatePresence };\n","import { useState } from 'react';\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\n\r\ninterface AccordionProps {\r\n    position?: number;\r\n    className?: string;\r\n    contentClassName?: string;\r\n    title: string;\r\n    children?: React.ReactNode;\r\n}\r\nexport default function AccordionComponent(props: AccordionProps) {\r\n    const [isActive, setIsActive] = useState(false);\r\n    return (\r\n        <AnimatePresence initial={false} >\r\n            {\r\n                <div\r\n                    className=\"flex flex-col select-none py-6\">\r\n                    <div onClick={() => setIsActive(!isActive)} className={`${isActive ? 'mb-6' : 'mb-0'} flex flex-row justify-between w-full gap-2 lg:gap-12 ${props.className}`}>\r\n                        {\r\n                            props.position ? <p className=\"basis-1/5 text-2xl xs:text-xl font-dm-sans text-partial\">{props.position < 10 ? '0' + (props.position) : (props.position)}</p> : ''\r\n                        }\r\n                        <p className=\"basis-4/5 text-2xl xs:text-xl font-dm-sans text-partial\">{props.title}</p>\r\n                        <motion.div className='self-center'\r\n                            initial=\"collapsed\"\r\n                            animate=\"open\"\r\n                            exit=\"collapsed\"\r\n                            variants={{\r\n                                collapsed: { rotate: isActive ? 0 : 90 },\r\n                                open: { rotate: isActive ? 90 : 0 },\r\n                            }}\r\n                            transition={{ duration: 0.8, }}\r\n                        >\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14.12\" height=\"25.414\" viewBox=\"0 0 14.12 25.414\">\r\n                                <path id=\"Path_60\" data-name=\"Path 60\" d=\"M0,12,12,0,24,12\" transform=\"translate(12.706 0.707) rotate(90)\" fill=\"none\" stroke=\"#10403c\" strokeWidth=\"2\" />\r\n                            </svg>\r\n                        </motion.div>\r\n                    </div>\r\n                    <motion.div initial=\"collapsed\"\r\n                        animate=\"open\"\r\n                        exit=\"collapsed\"\r\n                        variants={{\r\n                            collapsed: { opacity: isActive ? 0 : 1, height: isActive ? 0 : \"auto\" },\r\n                            open: { opacity: isActive ? 1 : 0, height: isActive ? \"auto\" : 0 }\r\n                        }}\r\n                        transition={{ duration: 0 }} className={`flex flex-row w-full gap-2 lg:gap-12 lg:text-2xl md:text-xl sm:text-xl font-dm-sans text-partial ${props.contentClassName}`}>\r\n                        {\r\n                            props.position ? <p className=\"basis-1/5 text-2xl xs:text-xl font-dm-sans invisible\">01</p> : ''\r\n                        }\r\n                        <p className=\"basis-4/5 text-base text-start\">\r\n                            {props.children}\r\n                        </p>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className='invisible' width=\"14.12\" height=\"25.414\" viewBox=\"0 0 14.12 25.414\">\r\n                            <path id=\"Path_60\" data-name=\"Path 60\" d=\"M0,12,12,0,24,12\" transform=\"translate(12.706 0.707) rotate(90)\" fill=\"none\" stroke=\"#10403c\" strokeWidth=\"2\" />\r\n                        </svg>\r\n                    </motion.div>\r\n                </div>\r\n            }\r\n        </AnimatePresence>\r\n    )\r\n}\r\n"],"names":["useIsMounted","isMounted","react","useRef","use_isomorphic_effect","L","current","PopChildMeasure","Component","getSnapshotBeforeUpdate","prevProps","element","props","childRef","isPresent","size","sizeRef","height","offsetHeight","width","offsetWidth","top","offsetTop","left","offsetLeft","componentDidUpdate","render","children","PopChild","id","useId","ref","useInsertionEffect","dataset","motionPopId","style","document","createElement","head","appendChild","sheet","insertRule","removeChild","cloneElement","PresenceChild","initial","onExitComplete","custom","presenceAffectsLayout","mode","presenceChildren","use_constant","h","newChildrenMap","context","useMemo","isComplete","set","childId","values","register","delete","undefined","forEach","_","key","useEffect","PresenceContext","O","Provider","value","Map","getChildKey","child","AnimatePresence","exitBeforeEnter","callback","forceRender","useForceUpdate","forcedRenderCount","setForcedRenderCount","useState","useCallback","deferredForceRender","frameloop","Z_","postRender","forceRenderLayoutGroup","useContext","LayoutGroupContext","p","filteredChildren","onlyElements","filtered","Children","isValidElement","push","childrenToRender","exiting","Set","presentChildren","allChildren","isInitialRender","updateChildLookup","clear","Fragment","map","presentKeys","targetKeys","numPresent","length","i","indexOf","add","get","insertionIndex","onExit","removeIndex","findIndex","presentChild","splice","has","AccordionComponent","isActive","setIsActive","jsx_runtime","jsx","jsxs","div","className","onClick","concat","position","title","motion","animate","exit","variants","collapsed","rotate","open","transition","duration","svg","xmlns","viewBox","path","data-name","d","transform","fill","stroke","strokeWidth","opacity","contentClassName"],"sourceRoot":""}