{"version":3,"file":"static/chunks/5414.524439a43e6cc4ae.js","mappings":"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","sources":["webpack://_N_E/./node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/PresenceContext.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/frameloop/data.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/frameloop/on-next-frame.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/frameloop/create-render-step.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/frameloop/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/MotionContext/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/LazyContext.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/is-ref-object.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/MotionContext/create.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/definitions.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/load-features.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/node/state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/node/id.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/symbol.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/clamp.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/numbers/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/utils.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/numbers/units.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/use-props.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/path.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/use-props.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/use-render.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/render.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/render.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/resolve-value.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/config-motion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/config-motion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/events/add-dom-event.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/events/event-info.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/events/add-pointer-event.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/types.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/pipe.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/Feature.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/hover.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/focus.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/noop.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/press.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/gestures.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/shallow-compare.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/array.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/subscription-manager.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/color/utils.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/color/rgba.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/color/hex.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/color/hsla.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/color/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/complex/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/complex/filter.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/setters.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/use-will-change/is.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs","webpack://_N_E/./node_modules/hey-listen/dist/hey-listen.es.js","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/time-conversion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/ease.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/mix.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/mix-color.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/mix-complex.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/progress.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/interpolate.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/circ.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/back.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/anticipate.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/easing.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/legacy-popmotion/keyframes.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/legacy-popmotion/find-spring.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/legacy-popmotion/spring.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/legacy-popmotion/decay.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/legacy-popmotion/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/waapi/easing.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/waapi/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/waapi/supports.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/waapi/utils/get-final-keyframe.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/waapi/create-accelerated-animation.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/delay.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/create-instant-animation.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/legacy-popmotion/inertia.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/transitions.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/animation.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/animation-state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/animation/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/animations.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/distance.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/models.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/utils/measure.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/drag/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/pan/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/animate.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/shared/stack.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/styles/transform.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/drag.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/motion-values.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/VisualElement.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/layout.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/motion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/is-browser.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/use-constant.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs","webpack://_N_E/<anon>"],"sourcesContent":["import { createContext } from 'react';\n\nconst LayoutGroupContext = createContext({});\n\nexport { LayoutGroupContext };\n","import { createContext } from 'react';\n\n/**\n * @public\n */\nconst PresenceContext = createContext(null);\n\nexport { PresenceContext };\n","const frameData = {\n    delta: 0,\n    timestamp: 0,\n};\n\nexport { frameData };\n","/*\n  Detect and load appropriate clock setting for the execution environment\n */\nconst defaultTimestep = (1 / 60) * 1000;\nconst getCurrentTime = typeof performance !== \"undefined\"\n    ? () => performance.now()\n    : () => Date.now();\nconst onNextFrame = typeof window !== \"undefined\"\n    ? (callback) => window.requestAnimationFrame(callback)\n    : (callback) => setTimeout(() => callback(getCurrentTime()), defaultTimestep);\n\nexport { defaultTimestep, onNextFrame };\n","function createRenderStep(runNextFrame) {\n    /**\n     * We create and reuse two arrays, one to queue jobs for the current frame\n     * and one for the next. We reuse to avoid triggering GC after x frames.\n     */\n    let toRun = [];\n    let toRunNextFrame = [];\n    /**\n     *\n     */\n    let numToRun = 0;\n    /**\n     * Track whether we're currently processing jobs in this step. This way\n     * we can decide whether to schedule new jobs for this frame or next.\n     */\n    let isProcessing = false;\n    let flushNextFrame = false;\n    /**\n     * A set of processes which were marked keepAlive when scheduled.\n     */\n    const toKeepAlive = new WeakSet();\n    const step = {\n        /**\n         * Schedule a process to run on the next frame.\n         */\n        schedule: (callback, keepAlive = false, immediate = false) => {\n            const addToCurrentFrame = immediate && isProcessing;\n            const buffer = addToCurrentFrame ? toRun : toRunNextFrame;\n            if (keepAlive)\n                toKeepAlive.add(callback);\n            // If the buffer doesn't already contain this callback, add it\n            if (buffer.indexOf(callback) === -1) {\n                buffer.push(callback);\n                // If we're adding it to the currently running buffer, update its measured size\n                if (addToCurrentFrame && isProcessing)\n                    numToRun = toRun.length;\n            }\n            return callback;\n        },\n        /**\n         * Cancel the provided callback from running on the next frame.\n         */\n        cancel: (callback) => {\n            const index = toRunNextFrame.indexOf(callback);\n            if (index !== -1)\n                toRunNextFrame.splice(index, 1);\n            toKeepAlive.delete(callback);\n        },\n        /**\n         * Execute all schedule callbacks.\n         */\n        process: (frameData) => {\n            /**\n             * If we're already processing we've probably been triggered by a flushSync\n             * inside an existing process. Instead of executing, mark flushNextFrame\n             * as true and ensure we flush the following frame at the end of this one.\n             */\n            if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [toRun, toRunNextFrame] = [toRunNextFrame, toRun];\n            // Clear the next frame list\n            toRunNextFrame.length = 0;\n            // Execute this frame\n            numToRun = toRun.length;\n            if (numToRun) {\n                for (let i = 0; i < numToRun; i++) {\n                    const callback = toRun[i];\n                    callback(frameData);\n                    if (toKeepAlive.has(callback)) {\n                        step.schedule(callback);\n                        runNextFrame();\n                    }\n                }\n            }\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        },\n    };\n    return step;\n}\n\nexport { createRenderStep };\n","import { onNextFrame, defaultTimestep } from './on-next-frame.mjs';\nimport { createRenderStep } from './create-render-step.mjs';\nimport { frameData } from './data.mjs';\n\nconst maxElapsed = 40;\nlet useDefaultElapsed = true;\nlet runNextFrame = false;\nlet isProcessing = false;\nconst stepsOrder = [\n    \"read\",\n    \"update\",\n    \"preRender\",\n    \"render\",\n    \"postRender\",\n];\nconst steps = stepsOrder.reduce((acc, key) => {\n    acc[key] = createRenderStep(() => (runNextFrame = true));\n    return acc;\n}, {});\nconst sync = stepsOrder.reduce((acc, key) => {\n    const step = steps[key];\n    acc[key] = (process, keepAlive = false, immediate = false) => {\n        if (!runNextFrame)\n            startLoop();\n        return step.schedule(process, keepAlive, immediate);\n    };\n    return acc;\n}, {});\nconst cancelSync = stepsOrder.reduce((acc, key) => {\n    acc[key] = steps[key].cancel;\n    return acc;\n}, {});\nconst flushSync = stepsOrder.reduce((acc, key) => {\n    acc[key] = () => steps[key].process(frameData);\n    return acc;\n}, {});\nconst processStep = (stepId) => steps[stepId].process(frameData);\nconst processFrame = (timestamp) => {\n    runNextFrame = false;\n    frameData.delta = useDefaultElapsed\n        ? defaultTimestep\n        : Math.max(Math.min(timestamp - frameData.timestamp, maxElapsed), 1);\n    frameData.timestamp = timestamp;\n    isProcessing = true;\n    stepsOrder.forEach(processStep);\n    isProcessing = false;\n    if (runNextFrame) {\n        useDefaultElapsed = false;\n        onNextFrame(processFrame);\n    }\n};\nconst startLoop = () => {\n    runNextFrame = true;\n    useDefaultElapsed = true;\n    if (!isProcessing)\n        onNextFrame(processFrame);\n};\n\nexport { cancelSync, flushSync, sync };\n","import { createContext } from 'react';\n\n/**\n * @public\n */\nconst MotionConfigContext = createContext({\n    transformPagePoint: (p) => p,\n    isStatic: false,\n    reducedMotion: \"never\",\n});\n\nexport { MotionConfigContext };\n","import { createContext, useContext } from 'react';\n\nconst MotionContext = createContext({});\nfunction useVisualElementContext() {\n    return useContext(MotionContext).visualElement;\n}\n\nexport { MotionContext, useVisualElementContext };\n","import { createContext } from 'react';\n\nconst LazyContext = createContext({ strict: false });\n\nexport { LazyContext };\n","import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useVisualElementContext } from '../../context/MotionContext/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\n\nfunction useVisualElement(Component, visualState, props, createVisualElement) {\n    const parent = useVisualElementContext();\n    const lazyContext = useContext(LazyContext);\n    const presenceContext = useContext(PresenceContext);\n    const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = useRef();\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */\n    createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext\n                ? presenceContext.initial === false\n                : false,\n            reducedMotionConfig,\n        });\n    }\n    const visualElement = visualElementRef.current;\n    useInsertionEffect(() => {\n        visualElement && visualElement.update(props, presenceContext);\n    });\n    useIsomorphicLayoutEffect(() => {\n        visualElement && visualElement.render();\n    });\n    useEffect(() => {\n        visualElement && visualElement.updateFeatures();\n    });\n    /**\n     * Ideally this function would always run in a useEffect.\n     *\n     * However, if we have optimised appear animations to handoff from,\n     * it needs to happen synchronously to ensure there's no flash of\n     * incorrect styles in the event of a hydration error.\n     *\n     * So if we detect a situtation where optimised appear animations\n     * are running, we use useLayoutEffect to trigger animations.\n     */\n    const useAnimateChangesEffect = window.HandoffAppearAnimations\n        ? useIsomorphicLayoutEffect\n        : useEffect;\n    useAnimateChangesEffect(() => {\n        if (visualElement && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    return visualElement;\n}\n\nexport { useVisualElement };\n","function isRefObject(ref) {\n    return (typeof ref === \"object\" &&\n        Object.prototype.hasOwnProperty.call(ref, \"current\"));\n}\n\nexport { isRefObject };\n","import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return useCallback((instance) => {\n        instance && visualState.mount && visualState.mount(instance);\n        if (visualElement) {\n            instance\n                ? visualElement.mount(instance)\n                : visualElement.unmount();\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\nexport { useMotionRef };\n","/**\n * Decides if the supplied variable is variant label\n */\nfunction isVariantLabel(v) {\n    return typeof v === \"string\" || Array.isArray(v);\n}\n\nexport { isVariantLabel };\n","function isAnimationControls(v) {\n    return typeof v === \"object\" && typeof v.start === \"function\";\n}\n\nexport { isAnimationControls };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\n\nconst variantProps = [\n    \"initial\",\n    \"animate\",\n    \"exit\",\n    \"whileHover\",\n    \"whileDrag\",\n    \"whileTap\",\n    \"whileFocus\",\n    \"whileInView\",\n];\nfunction isControllingVariants(props) {\n    return (isAnimationControls(props.animate) ||\n        variantProps.some((name) => isVariantLabel(props[name])));\n}\nfunction isVariantNode(props) {\n    return Boolean(isControllingVariants(props) || props.variants);\n}\n\nexport { isControllingVariants, isVariantNode };\n","import { isVariantLabel } from '../../render/utils/is-variant-label.mjs';\nimport { isControllingVariants } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction getCurrentTreeVariants(props, context) {\n    if (isControllingVariants(props)) {\n        const { initial, animate } = props;\n        return {\n            initial: initial === false || isVariantLabel(initial)\n                ? initial\n                : undefined,\n            animate: isVariantLabel(animate) ? animate : undefined,\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\n\nexport { getCurrentTreeVariants };\n","import { useContext, useMemo } from 'react';\nimport { MotionContext } from './index.mjs';\nimport { getCurrentTreeVariants } from './utils.mjs';\n\nfunction useCreateMotionContext(props) {\n    const { initial, animate } = getCurrentTreeVariants(props, useContext(MotionContext));\n    return useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);\n}\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\n\nexport { useCreateMotionContext };\n","const featureProps = {\n    animation: [\n        \"animate\",\n        \"exit\",\n        \"variants\",\n        \"whileHover\",\n        \"whileTap\",\n        \"whileFocus\",\n        \"whileDrag\",\n        \"whileInView\",\n    ],\n    exit: [\"exit\"],\n    drag: [\"drag\", \"dragControls\"],\n    focus: [\"whileFocus\"],\n    hover: [\"whileHover\", \"onHoverStart\", \"onHoverEnd\"],\n    tap: [\"whileTap\", \"onTap\", \"onTapStart\", \"onTapCancel\"],\n    pan: [\"onPan\", \"onPanStart\", \"onPanSessionStart\", \"onPanEnd\"],\n    inView: [\"whileInView\", \"onViewportEnter\", \"onViewportLeave\"],\n    layout: [\"layout\", \"layoutId\"],\n};\nconst featureDefinitions = {};\nfor (const key in featureProps) {\n    featureDefinitions[key] = {\n        isEnabled: (props) => featureProps[key].some((name) => !!props[name]),\n    };\n}\n\nexport { featureDefinitions };\n","import { featureDefinitions } from './definitions.mjs';\n\nfunction loadFeatures(features) {\n    for (const key in features) {\n        featureDefinitions[key] = {\n            ...featureDefinitions[key],\n            ...features[key],\n        };\n    }\n}\n\nexport { loadFeatures };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { useConstant } from '../../utils/use-constant.mjs';\nimport { globalProjectionState } from './state.mjs';\n\nlet id = 1;\nfunction useProjectionId() {\n    return useConstant(() => {\n        if (globalProjectionState.hasEverUpdated) {\n            return id++;\n        }\n    });\n}\n\nexport { useProjectionId };\n","import { createContext } from 'react';\n\n/**\n * Internal, exported only for usage in Framer\n */\nconst SwitchLayoutGroupContext = createContext({});\n\nexport { SwitchLayoutGroupContext };\n","const motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n\nexport { motionComponentSymbol };\n","import * as React from 'react';\nimport { forwardRef, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../context/MotionContext/index.mjs';\nimport { useVisualElement } from './utils/use-visual-element.mjs';\nimport { useMotionRef } from './utils/use-motion-ref.mjs';\nimport { useCreateMotionContext } from '../context/MotionContext/create.mjs';\nimport { loadFeatures } from './features/load-features.mjs';\nimport { isBrowser } from '../utils/is-browser.mjs';\nimport { useProjectionId } from '../projection/node/id.mjs';\nimport { LayoutGroupContext } from '../context/LayoutGroupContext.mjs';\nimport { LazyContext } from '../context/LazyContext.mjs';\nimport { SwitchLayoutGroupContext } from '../context/SwitchLayoutGroupContext.mjs';\nimport { motionComponentSymbol } from './utils/symbol.mjs';\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component, }) {\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        /**\n         * If we need to measure the element we load this functionality in a\n         * separate class component in order to gain access to getSnapshotBeforeUpdate.\n         */\n        let MeasureLayout;\n        const configAndProps = {\n            ...useContext(MotionConfigContext),\n            ...props,\n            layoutId: useLayoutId(props),\n        };\n        const { isStatic } = configAndProps;\n        const context = useCreateMotionContext(props);\n        /**\n         * Create a unique projection ID for this component. If a new component is added\n         * during a layout animation we'll use this to query the DOM and hydrate its ref early, allowing\n         * us to measure it as soon as any layout effect flushes pending layout animations.\n         *\n         * Performance note: It'd be better not to have to search the DOM for these elements.\n         * For newly-entering components it could be enough to only correct treeScale, in which\n         * case we could mount in a scale-correction mode. This wouldn't be enough for\n         * shared element transitions however. Perhaps for those we could revert to a root node\n         * that gets forceRendered and layout animations are triggered on its layout effect.\n         */\n        const projectionId = isStatic ? undefined : useProjectionId();\n        const visualState = useVisualState(props, isStatic);\n        if (!isStatic && isBrowser) {\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */\n            context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement);\n            /**\n             * Load Motion gesture and animation features. These are rendered as renderless\n             * components so each feature can optionally make use of React lifecycle methods.\n             */\n            const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n            const isStrict = useContext(LazyContext).strict;\n            if (context.visualElement) {\n                MeasureLayout = context.visualElement.loadFeatures(\n                // Note: Pass the full new combined props to correctly re-render dynamic feature components.\n                configAndProps, isStrict, preloadedFeatures, projectionId, initialLayoutGroupConfig);\n            }\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */\n        return (React.createElement(MotionContext.Provider, { value: context },\n            MeasureLayout && context.visualElement ? (React.createElement(MeasureLayout, { visualElement: context.visualElement, ...configAndProps })) : null,\n            useRender(Component, props, projectionId, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)));\n    }\n    const ForwardRefComponent = forwardRef(MotionComponent);\n    ForwardRefComponent[motionComponentSymbol] = Component;\n    return ForwardRefComponent;\n}\nfunction useLayoutId({ layoutId }) {\n    const layoutGroupId = useContext(LayoutGroupContext).id;\n    return layoutGroupId && layoutId !== undefined\n        ? layoutGroupId + \"-\" + layoutId\n        : layoutId;\n}\n\nexport { createMotionComponent };\n","import { createMotionComponent } from '../../motion/index.mjs';\n\n/**\n * Convert any React component into a `motion` component. The provided component\n * **must** use `React.forwardRef` to the underlying DOM component you want to animate.\n *\n * ```jsx\n * const Component = React.forwardRef((props, ref) => {\n *   return <div ref={ref} />\n * })\n *\n * const MotionComponent = motion(Component)\n * ```\n *\n * @public\n */\nfunction createMotionProxy(createConfig) {\n    function custom(Component, customMotionComponentConfig = {}) {\n        return createMotionComponent(createConfig(Component, customMotionComponentConfig));\n    }\n    if (typeof Proxy === \"undefined\") {\n        return custom;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */\n    const componentCache = new Map();\n    return new Proxy(custom, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */\n        get: (_target, key) => {\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */\n            if (!componentCache.has(key)) {\n                componentCache.set(key, custom(key));\n            }\n            return componentCache.get(key);\n        },\n    });\n}\n\nexport { createMotionProxy };\n","/**\n * We keep these listed seperately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */\nconst lowercaseSVGElements = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"switch\",\n    \"symbol\",\n    \"svg\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\",\n];\n\nexport { lowercaseSVGElements };\n","import { lowercaseSVGElements } from '../../svg/lowercase-elements.mjs';\n\nfunction isSVGComponent(Component) {\n    if (\n    /**\n     * If it's not a string, it's a custom React component. Currently we only support\n     * HTML custom React components.\n     */\n    typeof Component !== \"string\" ||\n        /**\n         * If it contains a dash, the element is a custom HTML webcomponent.\n         */\n        Component.includes(\"-\")) {\n        return false;\n    }\n    else if (\n    /**\n     * If it's in our list of lowercase SVG tags, it's an SVG component\n     */\n    lowercaseSVGElements.indexOf(Component) > -1 ||\n        /**\n         * If it contains a capital letter, it's an SVG component\n         */\n        /[A-Z]/.test(Component)) {\n        return true;\n    }\n    return false;\n}\n\nexport { isSVGComponent };\n","const scaleCorrectors = {};\nfunction addScaleCorrector(correctors) {\n    Object.assign(scaleCorrectors, correctors);\n}\n\nexport { addScaleCorrector, scaleCorrectors };\n","/**\n * Generate a list of every possible transform key.\n */\nconst transformPropOrder = [\n    \"transformPerspective\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"translateX\",\n    \"translateY\",\n    \"translateZ\",\n    \"scale\",\n    \"scaleX\",\n    \"scaleY\",\n    \"rotate\",\n    \"rotateX\",\n    \"rotateY\",\n    \"rotateZ\",\n    \"skew\",\n    \"skewX\",\n    \"skewY\",\n];\n/**\n * A quick lookup for transform props.\n */\nconst transformProps = new Set(transformPropOrder);\n\nexport { transformPropOrder, transformProps };\n","import { scaleCorrectors } from '../../projection/styles/scale-correction.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\n\nfunction isForcedMotionValue(key, { layout, layoutId }) {\n    return (transformProps.has(key) ||\n        key.startsWith(\"origin\") ||\n        ((layout || layoutId !== undefined) &&\n            (!!scaleCorrectors[key] || key === \"opacity\")));\n}\n\nexport { isForcedMotionValue };\n","const isMotionValue = (value) => Boolean(value && value.getVelocity);\n\nexport { isMotionValue };\n","import { transformPropOrder } from './transform.mjs';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(transform, { enableHardwareAcceleration = true, allowTransformNone = true, }, transformIsDefault, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        if (transform[key] !== undefined) {\n            const transformName = translateAlias[key] || key;\n            transformString += `${transformName}(${transform[key]}) `;\n        }\n    }\n    if (enableHardwareAcceleration && !transform.z) {\n        transformString += \"translateZ(0)\";\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (allowTransformNone && transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n","/**\n * Returns true if the provided key is a CSS variable\n */\nfunction isCSSVariable(key) {\n    return key.startsWith(\"--\");\n}\n\nexport { isCSSVariable };\n","/**\n * Provided a value and a ValueType, returns the value as that value type.\n */\nconst getValueAsType = (value, type) => {\n    return type && typeof value === \"number\"\n        ? type.transform(value)\n        : value;\n};\n\nexport { getValueAsType };\n","const clamp = (min, max, v) => Math.min(Math.max(v, min), max);\n\nexport { clamp };\n","import { clamp } from '../../../utils/clamp.mjs';\n\nconst number = {\n    test: (v) => typeof v === \"number\",\n    parse: parseFloat,\n    transform: (v) => v,\n};\nconst alpha = {\n    ...number,\n    transform: (v) => clamp(0, 1, v),\n};\nconst scale = {\n    ...number,\n    default: 1,\n};\n\nexport { alpha, number, scale };\n","/**\n * TODO: When we move from string as a source of truth to data models\n * everything in this folder should probably be referred to as models vs types\n */\n// If this number is a decimal, make it just five decimal places\n// to avoid exponents\nconst sanitize = (v) => Math.round(v * 100000) / 100000;\nconst floatRegex = /(-)?([\\d]*\\.?[\\d])+/g;\nconst colorRegex = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))/gi;\nconst singleColorRegex = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))$/i;\nfunction isString(v) {\n    return typeof v === \"string\";\n}\n\nexport { colorRegex, floatRegex, isString, sanitize, singleColorRegex };\n","import { isString } from '../utils.mjs';\n\nconst createUnitType = (unit) => ({\n    test: (v) => isString(v) && v.endsWith(unit) && v.split(\" \").length === 1,\n    parse: parseFloat,\n    transform: (v) => `${v}${unit}`,\n});\nconst degrees = createUnitType(\"deg\");\nconst percent = createUnitType(\"%\");\nconst px = createUnitType(\"px\");\nconst vh = createUnitType(\"vh\");\nconst vw = createUnitType(\"vw\");\nconst progressPercentage = {\n    ...percent,\n    parse: (v) => percent.parse(v) / 100,\n    transform: (v) => percent.transform(v * 100),\n};\n\nexport { degrees, percent, progressPercentage, px, vh, vw };\n","import { number } from '../../../value/types/numbers/index.mjs';\n\nconst int = {\n    ...number,\n    transform: Math.round,\n};\n\nexport { int };\n","import { scale, alpha } from '../../../value/types/numbers/index.mjs';\nimport { px, degrees, progressPercentage } from '../../../value/types/numbers/units.mjs';\nimport { int } from './type-int.mjs';\n\nconst numberValueTypes = {\n    // Border props\n    borderWidth: px,\n    borderTopWidth: px,\n    borderRightWidth: px,\n    borderBottomWidth: px,\n    borderLeftWidth: px,\n    borderRadius: px,\n    radius: px,\n    borderTopLeftRadius: px,\n    borderTopRightRadius: px,\n    borderBottomRightRadius: px,\n    borderBottomLeftRadius: px,\n    // Positioning props\n    width: px,\n    maxWidth: px,\n    height: px,\n    maxHeight: px,\n    size: px,\n    top: px,\n    right: px,\n    bottom: px,\n    left: px,\n    // Spacing props\n    padding: px,\n    paddingTop: px,\n    paddingRight: px,\n    paddingBottom: px,\n    paddingLeft: px,\n    margin: px,\n    marginTop: px,\n    marginRight: px,\n    marginBottom: px,\n    marginLeft: px,\n    // Transform props\n    rotate: degrees,\n    rotateX: degrees,\n    rotateY: degrees,\n    rotateZ: degrees,\n    scale,\n    scaleX: scale,\n    scaleY: scale,\n    scaleZ: scale,\n    skew: degrees,\n    skewX: degrees,\n    skewY: degrees,\n    distance: px,\n    translateX: px,\n    translateY: px,\n    translateZ: px,\n    x: px,\n    y: px,\n    z: px,\n    perspective: px,\n    transformPerspective: px,\n    opacity: alpha,\n    originX: progressPercentage,\n    originY: progressPercentage,\n    originZ: px,\n    // Misc\n    zIndex: int,\n    // SVG\n    fillOpacity: alpha,\n    strokeOpacity: alpha,\n    numOctaves: int,\n};\n\nexport { numberValueTypes };\n","import { buildTransform } from './build-transform.mjs';\nimport { isCSSVariable } from '../../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nfunction buildHTMLStyles(state, latestValues, options, transformTemplate) {\n    const { style, vars, transform, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    // Does the calculated transform essentially equal \"none\"?\n    let transformIsNone = true;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept seperately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        /**\n         * If this is a CSS variable we don't do any further processing.\n         */\n        if (isCSSVariable(key)) {\n            vars[key] = value;\n            continue;\n        }\n        // Convert the value to its default value type, ie 0 -> \"0px\"\n        const valueType = numberValueTypes[key];\n        const valueAsType = getValueAsType(value, valueType);\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            transform[key] = valueAsType;\n            // If we already know we have a non-default transform, early return\n            if (!transformIsNone)\n                continue;\n            // Otherwise check to see if this is a default transform\n            if (value !== (valueType.default || 0))\n                transformIsNone = false;\n        }\n        else if (key.startsWith(\"origin\")) {\n            // If this is a transform origin, flag and enable further transform-origin processing\n            hasTransformOrigin = true;\n            transformOrigin[key] = valueAsType;\n        }\n        else {\n            style[key] = valueAsType;\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(state.transform, options, transformIsNone, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nexport { buildHTMLStyles };\n","const createHtmlRenderState = () => ({\n    style: {},\n    transform: {},\n    transformOrigin: {},\n    vars: {},\n});\n\nexport { createHtmlRenderState };\n","import { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (const key in source) {\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState, isStatic) {\n    return useMemo(() => {\n        const state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState, isStatic) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState, isStatic));\n    return props.transformValues ? props.transformValues(style) : style;\n}\nfunction useHTMLProps(props, visualState, isStatic) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState, isStatic);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined &&\n        (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps };\n","/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */\nconst validMotionProps = new Set([\n    \"animate\",\n    \"exit\",\n    \"variants\",\n    \"initial\",\n    \"style\",\n    \"values\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"transformValues\",\n    \"custom\",\n    \"inherit\",\n    \"onLayoutAnimationStart\",\n    \"onLayoutAnimationComplete\",\n    \"onLayoutMeasure\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"_dragX\",\n    \"_dragY\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"ignoreStrict\",\n    \"viewport\",\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */\nfunction isValidMotionProp(key) {\n    return (key.startsWith(\"while\") ||\n        (key.startsWith(\"drag\") && key !== \"draggable\") ||\n        key.startsWith(\"layout\") ||\n        key.startsWith(\"onTap\") ||\n        key.startsWith(\"onPan\") ||\n        validMotionProps.has(key));\n}\n\nexport { isValidMotionProp };\n","import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\n\nlet shouldForward = (key) => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp)\n        return;\n    // Explicitly filter our events\n    shouldForward = (key) => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n}\ncatch (_a) {\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for (const key in props) {\n        /**\n         * values is considered a valid prop by Emotion, so if it's present\n         * this will be rendered out to the DOM unless explicitly filtered.\n         *\n         * We check the type as it could be used with the `feColorMatrix`\n         * element, which we support.\n         */\n        if (key === \"values\" && typeof props.values === \"object\")\n            continue;\n        if (shouldForward(key) ||\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\n            (!isDom && !isValidMotionProp(key)) ||\n            // If trying to use native HTML drag events, forward drag listeners\n            (props[\"draggable\"] && key.startsWith(\"onDrag\"))) {\n            filteredProps[key] = props[key];\n        }\n    }\n    return filteredProps;\n}\n\nexport { filterProps, loadExternalIsValidProp };\n","import { px } from '../../../value/types/numbers/units.mjs';\n\nfunction calcOrigin(origin, offset, size) {\n    return typeof origin === \"string\"\n        ? origin\n        : px.transform(offset + size * origin);\n}\n/**\n * The SVG transform origin defaults are different to CSS and is less intuitive,\n * so we use the measured dimensions of the SVG to reconcile these.\n */\nfunction calcSVGTransformOrigin(dimensions, originX, originY) {\n    const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);\n    const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);\n    return `${pxOriginX} ${pxOriginY}`;\n}\n\nexport { calcSVGTransformOrigin };\n","import { px } from '../../../value/types/numbers/units.mjs';\n\nconst dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\",\n};\nconst camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\",\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */\nfunction buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {\n    // Normalise path length by setting SVG attribute pathLength to 1\n    attrs.pathLength = 1;\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    const keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = px.transform(-offset);\n    // Build the dash array\n    const pathLength = px.transform(length);\n    const pathSpacing = px.transform(spacing);\n    attrs[keys.array] = `${pathLength} ${pathSpacing}`;\n}\n\nexport { buildSVGPath };\n","import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { calcSVGTransformOrigin } from './transform-origin.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, { attrX, attrY, originX, originY, pathLength, pathSpacing = 1, pathOffset = 0, \n// This is object creation, which we try to avoid per-frame.\n...latest }, options, isSVGTag, transformTemplate) {\n    buildHTMLStyles(state, latest, options, transformTemplate);\n    /**\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n     * as normal HTML tags.\n     */\n    if (isSVGTag) {\n        if (state.style.viewBox) {\n            state.attrs.viewBox = state.style.viewBox;\n        }\n        return;\n    }\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style, dimensions } = state;\n    /**\n     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n     * and copy it into style.\n     */\n    if (attrs.transform) {\n        if (dimensions)\n            style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    // Parse transformOrigin\n    if (dimensions &&\n        (originX !== undefined || originY !== undefined || style.transform)) {\n        style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n    }\n    // Treat x/y not as shortcuts but as actual attributes\n    if (attrX !== undefined)\n        attrs.x = attrX;\n    if (attrY !== undefined)\n        attrs.y = attrY;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\nexport { buildSVGAttrs };\n","import { createHtmlRenderState } from '../../html/utils/create-render-state.mjs';\n\nconst createSvgRenderState = () => ({\n    ...createHtmlRenderState(),\n    attrs: {},\n});\n\nexport { createSvgRenderState };\n","const isSVGTag = (tag) => typeof tag === \"string\" && tag.toLowerCase() === \"svg\";\n\nexport { isSVGTag };\n","import { useMemo } from 'react';\nimport { copyRawValuesOnly } from '../html/use-props.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n    const visualProps = useMemo(() => {\n        const state = createSvgRenderState();\n        buildSVGAttrs(state, visualState, { enableHardwareAcceleration: false }, isSVGTag(Component), props.transformTemplate);\n        return {\n            ...state.attrs,\n            style: { ...state.style },\n        };\n    }, [visualState]);\n    if (props.style) {\n        const rawStyles = {};\n        copyRawValuesOnly(rawStyles, props.style, props);\n        visualProps.style = { ...rawStyles, ...visualProps.style };\n    }\n    return visualProps;\n}\n\nexport { useSVGProps };\n","import { useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction createUseRender(forwardMotionProps = false) {\n    const useRender = (Component, props, projectionId, ref, { latestValues }, isStatic) => {\n        const useVisualProps = isSVGComponent(Component)\n            ? useSVGProps\n            : useHTMLProps;\n        const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n        const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n        const elementProps = {\n            ...filteredProps,\n            ...visualProps,\n            ref,\n        };\n        /**\n         * If component has been handed a motion value as its child,\n         * memoise its initial value and render that. Subsequent updates\n         * will be handled by the onChange handler\n         */\n        const { children } = props;\n        const renderedChildren = useMemo(() => (isMotionValue(children) ? children.get() : children), [children]);\n        if (projectionId) {\n            elementProps[\"data-projection-id\"] = projectionId;\n        }\n        return createElement(Component, {\n            ...elementProps,\n            children: renderedChildren,\n        });\n    };\n    return useRender;\n}\n\nexport { createUseRender };\n","/**\n * Convert camelCase to dash-case properties.\n */\nconst camelToDash = (str) => str.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n\nexport { camelToDash };\n","function renderHTML(element, { style, vars }, styleProp, projection) {\n    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));\n    // Loop over any CSS variables and assign those.\n    for (const key in vars) {\n        element.style.setProperty(key, vars[key]);\n    }\n}\n\nexport { renderHTML };\n","/**\n * A set of attribute names that are always read/written as camel case.\n */\nconst camelCaseAttributes = new Set([\n    \"baseFrequency\",\n    \"diffuseConstant\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerWidth\",\n    \"numOctaves\",\n    \"targetX\",\n    \"targetY\",\n    \"surfaceScale\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"stdDeviation\",\n    \"tableValues\",\n    \"viewBox\",\n    \"gradientTransform\",\n    \"pathLength\",\n    \"startOffset\",\n    \"textLength\",\n    \"lengthAdjust\",\n]);\n\nexport { camelCaseAttributes };\n","import { camelToDash } from '../../dom/utils/camel-to-dash.mjs';\nimport { renderHTML } from '../../html/utils/render.mjs';\nimport { camelCaseAttributes } from './camel-case-attrs.mjs';\n\nfunction renderSVG(element, renderState, _styleProp, projection) {\n    renderHTML(element, renderState, undefined, projection);\n    for (const key in renderState.attrs) {\n        element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);\n    }\n}\n\nexport { renderSVG };\n","import { isForcedMotionValue } from '../../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps) {\n    const { style } = props;\n    const newValues = {};\n    for (const key in style) {\n        if (isMotionValue(style[key]) ||\n            (prevProps.style && isMotionValue(prevProps.style[key])) ||\n            isForcedMotionValue(key, props)) {\n            newValues[key] = style[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","import { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\nimport { scrapeMotionValuesFromProps as scrapeMotionValuesFromProps$1 } from '../../html/utils/scrape-motion-values.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps) {\n    const newValues = scrapeMotionValuesFromProps$1(props, prevProps);\n    for (const key in props) {\n        if (isMotionValue(props[key]) || isMotionValue(prevProps[key])) {\n            const targetKey = key === \"x\" || key === \"y\" ? \"attr\" + key.toUpperCase() : key;\n            newValues[targetKey] = props[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","function resolveVariantFromProps(props, definition, custom, currentValues = {}, currentVelocity = {}) {\n    /**\n     * If the variant definition is a function, resolve.\n     */\n    if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */\n    if (typeof definition === \"string\") {\n        definition = props.variants && props.variants[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */\n    if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    return definition;\n}\n\nexport { resolveVariantFromProps };\n","const isKeyframesTarget = (v) => {\n    return Array.isArray(v);\n};\n\nexport { isKeyframesTarget };\n","import { isKeyframesTarget } from '../animation/utils/is-keyframes-target.mjs';\n\nconst isCustomValue = (v) => {\n    return Boolean(v && typeof v === \"object\" && v.mix && v.toValue);\n};\nconst resolveFinalValueInKeyframes = (v) => {\n    // TODO maybe throw if v.length - 1 is placeholder token?\n    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;\n};\n\nexport { isCustomValue, resolveFinalValueInKeyframes };\n","import { isCustomValue } from '../../utils/resolve-value.mjs';\nimport { isMotionValue } from './is-motion-value.mjs';\n\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */\nfunction resolveMotionValue(value) {\n    const unwrappedValue = isMotionValue(value) ? value.get() : value;\n    return isCustomValue(unwrappedValue)\n        ? unwrappedValue.toValue()\n        : unwrappedValue;\n}\n\nexport { resolveMotionValue };\n","import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, onMount, }, props, context, presenceContext) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    if (onMount) {\n        state.mount = (instance) => onMount(props, instance, state);\n    }\n    return state;\n}\nconst makeUseVisualState = (config) => (props, isStatic) => {\n    const context = useContext(MotionContext);\n    const presenceContext = useContext(PresenceContext);\n    const make = () => makeState(config, props, context, presenceContext);\n    return isStatic ? make() : useConstant(make);\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props, {});\n    for (const key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    if (context &&\n        isVariantNode$1 &&\n        !isControllingVariants$1 &&\n        props.inherit !== false) {\n        if (initial === undefined)\n            initial = context.initial;\n        if (animate === undefined)\n            animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext\n        ? presenceContext.initial === false\n        : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !isAnimationControls(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n        list.forEach((definition) => {\n            const resolved = resolveVariantFromProps(props, definition);\n            if (!resolved)\n                return;\n            const { transitionEnd, transition, ...target } = resolved;\n            for (const key in target) {\n                let valueTarget = target[key];\n                if (Array.isArray(valueTarget)) {\n                    /**\n                     * Take final keyframe if the initial animation is blocked because\n                     * we want to initialise at the end of that blocked animation.\n                     */\n                    const index = isInitialAnimationBlocked\n                        ? valueTarget.length - 1\n                        : 0;\n                    valueTarget = valueTarget[index];\n                }\n                if (valueTarget !== null) {\n                    values[key] = valueTarget;\n                }\n            }\n            for (const key in transitionEnd)\n                values[key] = transitionEnd[key];\n        });\n    }\n    return values;\n}\n\nexport { makeUseVisualState };\n","import { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nconst svgMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n        createRenderState: createSvgRenderState,\n        onMount: (props, instance, { renderState, latestValues }) => {\n            try {\n                renderState.dimensions =\n                    typeof instance.getBBox ===\n                        \"function\"\n                        ? instance.getBBox()\n                        : instance.getBoundingClientRect();\n            }\n            catch (e) {\n                // Most likely trying to measure an unrendered element under Firefox\n                renderState.dimensions = {\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0,\n                };\n            }\n            buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, isSVGTag(instance.tagName), props.transformTemplate);\n            renderSVG(instance, renderState);\n        },\n    }),\n};\n\nexport { svgMotionConfig };\n","import { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nconst htmlMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps,\n        createRenderState: createHtmlRenderState,\n    }),\n};\n\nexport { htmlMotionConfig };\n","import { isSVGComponent } from './is-svg-component.mjs';\nimport { createUseRender } from '../use-render.mjs';\nimport { svgMotionConfig } from '../../svg/config-motion.mjs';\nimport { htmlMotionConfig } from '../../html/config-motion.mjs';\n\nfunction createDomMotionConfig(Component, { forwardMotionProps = false }, preloadedFeatures, createVisualElement) {\n    const baseConfig = isSVGComponent(Component)\n        ? svgMotionConfig\n        : htmlMotionConfig;\n    return {\n        ...baseConfig,\n        preloadedFeatures,\n        useRender: createUseRender(forwardMotionProps),\n        createVisualElement,\n        Component,\n    };\n}\n\nexport { createDomMotionConfig };\n","function addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n\nexport { addDomEvent };\n","const isPrimaryPointer = (event) => {\n    if (event.pointerType === \"mouse\") {\n        return typeof event.button !== \"number\" || event.button <= 0;\n    }\n    else {\n        /**\n         * isPrimary is true for all mice buttons, whereas every touch point\n         * is regarded as its own input. So subsequent concurrent touch points\n         * will be false.\n         *\n         * Specifically match against false here as incomplete versions of\n         * PointerEvents in very old browser might have it set as undefined.\n         */\n        return event.isPrimary !== false;\n    }\n};\n\nexport { isPrimaryPointer };\n","import { isPrimaryPointer } from './utils/is-primary-pointer.mjs';\n\nfunction extractEventInfo(event, pointType = \"page\") {\n    return {\n        point: {\n            x: event[pointType + \"X\"],\n            y: event[pointType + \"Y\"],\n        },\n    };\n}\nconst addPointerInfo = (handler) => {\n    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\n\nexport { addPointerInfo, extractEventInfo };\n","import { addDomEvent } from './add-dom-event.mjs';\nimport { addPointerInfo } from './event-info.mjs';\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\n\nexport { addPointerEvent };\n","var AnimationType;\n(function (AnimationType) {\n    AnimationType[\"Animate\"] = \"animate\";\n    AnimationType[\"Hover\"] = \"whileHover\";\n    AnimationType[\"Tap\"] = \"whileTap\";\n    AnimationType[\"Drag\"] = \"whileDrag\";\n    AnimationType[\"Focus\"] = \"whileFocus\";\n    AnimationType[\"InView\"] = \"whileInView\";\n    AnimationType[\"Exit\"] = \"exit\";\n})(AnimationType || (AnimationType = {}));\n\nexport { AnimationType };\n","/**\n * Pipe\n * Compose other transformers to run linearily\n * pipe(min(20), max(40))\n * @param  {...functions} transformers\n * @return {function}\n */\nconst combineFunctions = (a, b) => (v) => b(a(v));\nconst pipe = (...transformers) => transformers.reduce(combineFunctions);\n\nexport { pipe };\n","function createLock(name) {\n    let lock = null;\n    return () => {\n        const openLock = () => {\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nconst globalHorizontalLock = createLock(\"dragHorizontal\");\nconst globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    let lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    }\n    else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    }\n    else {\n        const openHorizontal = globalHorizontalLock();\n        const openVertical = globalVerticalLock();\n        if (openHorizontal && openVertical) {\n            lock = () => {\n                openHorizontal();\n                openVertical();\n            };\n        }\n        else {\n            // Release the locks because we don't use them\n            if (openHorizontal)\n                openHorizontal();\n            if (openVertical)\n                openVertical();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    const openGestureLock = getGlobalLock(true);\n    if (!openGestureLock)\n        return true;\n    openGestureLock();\n    return false;\n}\n\nexport { createLock, getGlobalLock, isDragActive };\n","class Feature {\n    constructor(node) {\n        this.isMounted = false;\n        this.node = node;\n    }\n    update() { }\n}\n\nexport { Feature };\n","import { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { AnimationType } from '../render/utils/types.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\n\nfunction addHoverEvent(node, isActive) {\n    const eventName = \"pointer\" + (isActive ? \"enter\" : \"leave\");\n    const callbackName = \"onHover\" + (isActive ? \"Start\" : \"End\");\n    const handleEvent = (event, info) => {\n        if (event.type === \"touch\" || isDragActive())\n            return;\n        const props = node.getProps();\n        if (node.animationState && props.whileHover) {\n            node.animationState.setActive(AnimationType.Hover, isActive);\n        }\n        if (props[callbackName]) {\n            props[callbackName](event, info);\n        }\n    };\n    return addPointerEvent(node.current, eventName, handleEvent, {\n        passive: !node.getProps()[callbackName],\n    });\n}\nclass HoverGesture extends Feature {\n    mount() {\n        this.unmount = pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n    }\n    unmount() { }\n}\n\nexport { HoverGesture };\n","import { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { AnimationType } from '../render/utils/types.mjs';\nimport { pipe } from '../utils/pipe.mjs';\n\nclass FocusGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(AnimationType.Focus, true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(AnimationType.Focus, false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n    }\n    unmount() { }\n}\n\nexport { FocusGesture };\n","/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nconst isNodeOrChild = (parent, child) => {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nexport { isNodeOrChild };\n","const noop = (any) => any;\n\nexport { noop };\n","import { extractEventInfo } from '../events/event-info.mjs';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { AnimationType } from '../render/utils/types.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { noop } from '../utils/noop.mjs';\n\nfunction fireSyntheticPointerEvent(name, handler) {\n    if (!handler)\n        return;\n    const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n    handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\nclass PressGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removeStartListeners = noop;\n        this.removeEndListeners = noop;\n        this.removeAccessibleListeners = noop;\n        this.startPointerPress = (startEvent, startInfo) => {\n            this.removeEndListeners();\n            if (this.isPressing)\n                return;\n            const props = this.node.getProps();\n            const endPointerPress = (endEvent, endInfo) => {\n                if (!this.checkPressEnd())\n                    return;\n                const { onTap, onTapCancel } = this.node.getProps();\n                /**\n                 * We only count this as a tap gesture if the event.target is the same\n                 * as, or a child of, this component's element\n                 */\n                !isNodeOrChild(this.node.current, endEvent.target)\n                    ? onTapCancel && onTapCancel(endEvent, endInfo)\n                    : onTap && onTap(endEvent, endInfo);\n            };\n            const removePointerUpListener = addPointerEvent(window, \"pointerup\", endPointerPress, { passive: !(props.onTap || props[\"onPointerUp\"]) });\n            const removePointerCancelListener = addPointerEvent(window, \"pointercancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props.onTapCancel || props[\"onPointerCancel\"]) });\n            this.removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);\n            this.startPress(startEvent, startInfo);\n        };\n        this.startAccessiblePress = () => {\n            const handleKeydown = (keydownEvent) => {\n                if (keydownEvent.key !== \"Enter\" || this.isPressing)\n                    return;\n                const handleKeyup = (keyupEvent) => {\n                    if (keyupEvent.key !== \"Enter\" || !this.checkPressEnd())\n                        return;\n                    fireSyntheticPointerEvent(\"up\", this.node.getProps().onTap);\n                };\n                this.removeEndListeners();\n                this.removeEndListeners = addDomEvent(this.node.current, \"keyup\", handleKeyup);\n                fireSyntheticPointerEvent(\"down\", (event, info) => {\n                    this.startPress(event, info);\n                });\n            };\n            const removeKeydownListener = addDomEvent(this.node.current, \"keydown\", handleKeydown);\n            const handleBlur = () => {\n                if (!this.isPressing)\n                    return;\n                fireSyntheticPointerEvent(\"cancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));\n            };\n            const removeBlurListener = addDomEvent(this.node.current, \"blur\", handleBlur);\n            this.removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);\n        };\n    }\n    startPress(event, info) {\n        this.isPressing = true;\n        const { onTapStart, whileTap } = this.node.getProps();\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (whileTap && this.node.animationState) {\n            this.node.animationState.setActive(AnimationType.Tap, true);\n        }\n        onTapStart && onTapStart(event, info);\n    }\n    checkPressEnd() {\n        this.removeEndListeners();\n        this.isPressing = false;\n        const props = this.node.getProps();\n        if (props.whileTap && this.node.animationState) {\n            this.node.animationState.setActive(AnimationType.Tap, false);\n        }\n        return !isDragActive();\n    }\n    cancelPress(event, info) {\n        if (!this.checkPressEnd())\n            return;\n        const { onTapCancel } = this.node.getProps();\n        onTapCancel && onTapCancel(event, info);\n    }\n    mount() {\n        const props = this.node.getProps();\n        const removePointerListener = addPointerEvent(this.node.current, \"pointerdown\", this.startPointerPress, { passive: !(props.onTapStart || props[\"onPointerStart\"]) });\n        const removeFocusListener = addDomEvent(this.node.current, \"focus\", this.startAccessiblePress);\n        this.removeStartListeners = pipe(removePointerListener, removeFocusListener);\n    }\n    unmount() {\n        this.removeStartListeners();\n        this.removeEndListeners();\n        this.removeAccessibleListeners();\n    }\n}\n\nexport { PressGesture };\n","/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nexport { observeIntersection };\n","import { AnimationType } from '../../../render/utils/types.mjs';\nimport { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    /**\n     * TODO: Remove this in 10.0\n     */\n    viewportFallback() {\n        /**\n         * Fire this in an rAF because, at this point, the animation state\n         * won't have flushed for the first time and there's certain logic in\n         * there that behaves differently on the initial animation.\n         */\n        requestAnimationFrame(() => {\n            this.hasEnteredView = true;\n            const { onViewportEnter } = this.node.getProps();\n            onViewportEnter && onViewportEnter(null);\n            if (this.node.animationState) {\n                this.node.animationState.setActive(AnimationType.InView, true);\n            }\n        });\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once, fallback = true, } = viewport;\n        if (typeof IntersectionObserver === \"undefined\") {\n            if (fallback)\n                this.viewportFallback();\n            return;\n        }\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(AnimationType.InView, isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n","import { HoverGesture } from '../../gestures/hover.mjs';\nimport { FocusGesture } from '../../gestures/focus.mjs';\nimport { PressGesture } from '../../gestures/press.mjs';\nimport { InViewFeature } from './viewport/index.mjs';\n\nconst gestureAnimations = {\n    inView: {\n        Feature: InViewFeature,\n    },\n    tap: {\n        Feature: PressGesture,\n    },\n    focus: {\n        Feature: FocusGesture,\n    },\n    hover: {\n        Feature: HoverGesture,\n    },\n};\n\nexport { gestureAnimations };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */\nconst isNumericalString = (v) => /^\\-?\\d*\\.?\\d+$/.test(v);\n\nexport { isNumericalString };\n","/**\n * Check if the value is a zero value string like \"0px\" or \"0%\"\n */\nconst isZeroValueString = (v) => /^0[^.\\s]+$/.test(v);\n\nexport { isZeroValueString };\n","function addUniqueItem(arr, item) {\n    if (arr.indexOf(item) === -1)\n        arr.push(item);\n}\nfunction removeItem(arr, item) {\n    const index = arr.indexOf(item);\n    if (index > -1)\n        arr.splice(index, 1);\n}\n// Adapted from array-move\nfunction moveItem([...arr], fromIndex, toIndex) {\n    const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;\n    if (startIndex >= 0 && startIndex < arr.length) {\n        const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;\n        const [item] = arr.splice(fromIndex, 1);\n        arr.splice(endIndex, 0, item);\n    }\n    return arr;\n}\n\nexport { addUniqueItem, moveItem, removeItem };\n","import { addUniqueItem, removeItem } from './array.mjs';\n\nclass SubscriptionManager {\n    constructor() {\n        this.subscriptions = [];\n    }\n    add(handler) {\n        addUniqueItem(this.subscriptions, handler);\n        return () => removeItem(this.subscriptions, handler);\n    }\n    notify(a, b, c) {\n        const numSubscriptions = this.subscriptions.length;\n        if (!numSubscriptions)\n            return;\n        if (numSubscriptions === 1) {\n            /**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */\n            this.subscriptions[0](a, b, c);\n        }\n        else {\n            for (let i = 0; i < numSubscriptions; i++) {\n                /**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */\n                const handler = this.subscriptions[i];\n                handler && handler(a, b, c);\n            }\n        }\n    }\n    getSize() {\n        return this.subscriptions.length;\n    }\n    clear() {\n        this.subscriptions.length = 0;\n    }\n}\n\nexport { SubscriptionManager };\n","/*\n  Convert velocity into velocity per second\n\n  @param [number]: Unit per frame\n  @param [number]: Frame duration in ms\n*/\nfunction velocityPerSecond(velocity, frameDuration) {\n    return frameDuration ? velocity * (1000 / frameDuration) : 0;\n}\n\nexport { velocityPerSecond };\n","import { frameData } from '../frameloop/data.mjs';\nimport { sync } from '../frameloop/index.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\n\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    constructor(init, options = {}) {\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"9.0.4\";\n        /**\n         * Duration, in milliseconds, since last updating frame.\n         *\n         * @internal\n         */\n        this.timeDelta = 0;\n        /**\n         * Timestamp of the last time this `MotionValue` was updated.\n         *\n         * @internal\n         */\n        this.lastUpdated = 0;\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = false;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        this.updateAndNotify = (v, render = true) => {\n            this.prev = this.current;\n            this.current = v;\n            // Update timestamp\n            const { delta, timestamp } = frameData;\n            if (this.lastUpdated !== timestamp) {\n                this.timeDelta = delta;\n                this.lastUpdated = timestamp;\n                sync.postRender(this.scheduleVelocityCheck);\n            }\n            // Update update subscribers\n            if (this.prev !== this.current && this.events.change) {\n                this.events.change.notify(this.current);\n            }\n            // Update velocity subscribers\n            if (this.events.velocityChange) {\n                this.events.velocityChange.notify(this.getVelocity());\n            }\n            // Update render subscribers\n            if (render && this.events.renderRequest) {\n                this.events.renderRequest.notify(this.current);\n            }\n        };\n        /**\n         * Schedule a velocity check for the next frame.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.scheduleVelocityCheck = () => sync.postRender(this.velocityCheck);\n        /**\n         * Updates `prev` with `current` if the value hasn't been updated this frame.\n         * This ensures velocity calculations return `0`.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.velocityCheck = ({ timestamp }) => {\n            if (timestamp !== this.lastUpdated) {\n                this.prev = this.current;\n                if (this.events.velocityChange) {\n                    this.events.velocityChange.notify(this.getVelocity());\n                }\n            }\n        };\n        this.hasAnimated = false;\n        this.prev = this.current = init;\n        this.canTrackVelocity = isFloat(this.current);\n        this.owner = options.owner;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n    onChange(subscription) {\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return () => {\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */\n                sync.read(() => {\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for (const eventManagers in this.events) {\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = prev;\n        this.timeDelta = delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n    jump(v) {\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.stop();\n        if (this.stopPassiveEffect)\n            this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n        return this.canTrackVelocity\n            ? // These casts could be avoided if parseFloat would be typed better\n                velocityPerSecond(parseFloat(this.current) -\n                    parseFloat(this.prev), this.timeDelta)\n            : 0;\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    start(startAnimation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve) || null;\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(() => {\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        this.animation = null;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n\nexport { MotionValue, motionValue };\n","import { isString, singleColorRegex, floatRegex } from '../utils.mjs';\n\n/**\n * Returns true if the provided string is a color, ie rgba(0,0,0,0) or #000,\n * but false if a number or multiple colors\n */\nconst isColorString = (type, testProp) => (v) => {\n    return Boolean((isString(v) && singleColorRegex.test(v) && v.startsWith(type)) ||\n        (testProp && Object.prototype.hasOwnProperty.call(v, testProp)));\n};\nconst splitColor = (aName, bName, cName) => (v) => {\n    if (!isString(v))\n        return v;\n    const [a, b, c, alpha] = v.match(floatRegex);\n    return {\n        [aName]: parseFloat(a),\n        [bName]: parseFloat(b),\n        [cName]: parseFloat(c),\n        alpha: alpha !== undefined ? parseFloat(alpha) : 1,\n    };\n};\n\nexport { isColorString, splitColor };\n","import { clamp } from '../../../utils/clamp.mjs';\nimport { number, alpha } from '../numbers/index.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst clampRgbUnit = (v) => clamp(0, 255, v);\nconst rgbUnit = {\n    ...number,\n    transform: (v) => Math.round(clampRgbUnit(v)),\n};\nconst rgba = {\n    test: isColorString(\"rgb\", \"red\"),\n    parse: splitColor(\"red\", \"green\", \"blue\"),\n    transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => \"rgba(\" +\n        rgbUnit.transform(red) +\n        \", \" +\n        rgbUnit.transform(green) +\n        \", \" +\n        rgbUnit.transform(blue) +\n        \", \" +\n        sanitize(alpha.transform(alpha$1)) +\n        \")\",\n};\n\nexport { rgbUnit, rgba };\n","import { rgba } from './rgba.mjs';\nimport { isColorString } from './utils.mjs';\n\nfunction parseHex(v) {\n    let r = \"\";\n    let g = \"\";\n    let b = \"\";\n    let a = \"\";\n    // If we have 6 characters, ie #FF0000\n    if (v.length > 5) {\n        r = v.substring(1, 3);\n        g = v.substring(3, 5);\n        b = v.substring(5, 7);\n        a = v.substring(7, 9);\n        // Or we have 3 characters, ie #F00\n    }\n    else {\n        r = v.substring(1, 2);\n        g = v.substring(2, 3);\n        b = v.substring(3, 4);\n        a = v.substring(4, 5);\n        r += r;\n        g += g;\n        b += b;\n        a += a;\n    }\n    return {\n        red: parseInt(r, 16),\n        green: parseInt(g, 16),\n        blue: parseInt(b, 16),\n        alpha: a ? parseInt(a, 16) / 255 : 1,\n    };\n}\nconst hex = {\n    test: isColorString(\"#\"),\n    parse: parseHex,\n    transform: rgba.transform,\n};\n\nexport { hex };\n","import { alpha } from '../numbers/index.mjs';\nimport { percent } from '../numbers/units.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst hsla = {\n    test: isColorString(\"hsl\", \"hue\"),\n    parse: splitColor(\"hue\", \"saturation\", \"lightness\"),\n    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {\n        return (\"hsla(\" +\n            Math.round(hue) +\n            \", \" +\n            percent.transform(sanitize(saturation)) +\n            \", \" +\n            percent.transform(sanitize(lightness)) +\n            \", \" +\n            sanitize(alpha.transform(alpha$1)) +\n            \")\");\n    },\n};\n\nexport { hsla };\n","import { isString } from '../utils.mjs';\nimport { hex } from './hex.mjs';\nimport { hsla } from './hsla.mjs';\nimport { rgba } from './rgba.mjs';\n\nconst color = {\n    test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),\n    parse: (v) => {\n        if (rgba.test(v)) {\n            return rgba.parse(v);\n        }\n        else if (hsla.test(v)) {\n            return hsla.parse(v);\n        }\n        else {\n            return hex.parse(v);\n        }\n    },\n    transform: (v) => {\n        return isString(v)\n            ? v\n            : v.hasOwnProperty(\"red\")\n                ? rgba.transform(v)\n                : hsla.transform(v);\n    },\n};\n\nexport { color };\n","import { color } from '../color/index.mjs';\nimport { number } from '../numbers/index.mjs';\nimport { isString, floatRegex, colorRegex, sanitize } from '../utils.mjs';\n\nconst colorToken = \"${c}\";\nconst numberToken = \"${n}\";\nfunction test(v) {\n    var _a, _b;\n    return (isNaN(v) &&\n        isString(v) &&\n        (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) +\n            (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) >\n            0);\n}\nfunction analyseComplexValue(v) {\n    if (typeof v === \"number\")\n        v = `${v}`;\n    const values = [];\n    let numColors = 0;\n    let numNumbers = 0;\n    const colors = v.match(colorRegex);\n    if (colors) {\n        numColors = colors.length;\n        // Strip colors from input so they're not picked up by number regex.\n        // There's a better way to combine these regex searches, but its beyond my regex skills\n        v = v.replace(colorRegex, colorToken);\n        values.push(...colors.map(color.parse));\n    }\n    const numbers = v.match(floatRegex);\n    if (numbers) {\n        numNumbers = numbers.length;\n        v = v.replace(floatRegex, numberToken);\n        values.push(...numbers.map(number.parse));\n    }\n    return { values, numColors, numNumbers, tokenised: v };\n}\nfunction parse(v) {\n    return analyseComplexValue(v).values;\n}\nfunction createTransformer(source) {\n    const { values, numColors, tokenised } = analyseComplexValue(source);\n    const numValues = values.length;\n    return (v) => {\n        let output = tokenised;\n        for (let i = 0; i < numValues; i++) {\n            output = output.replace(i < numColors ? colorToken : numberToken, i < numColors\n                ? color.transform(v[i])\n                : sanitize(v[i]));\n        }\n        return output;\n    };\n}\nconst convertNumbersToZero = (v) => typeof v === \"number\" ? 0 : v;\nfunction getAnimatableNone(v) {\n    const parsed = parse(v);\n    const transformer = createTransformer(v);\n    return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = { test, parse, createTransformer, getAnimatableNone };\n\nexport { analyseComplexValue, complex };\n","import { complex } from './index.mjs';\nimport { floatRegex } from '../utils.mjs';\n\n/**\n * Properties that should default to 1 or 100%\n */\nconst maxDefaults = new Set([\"brightness\", \"contrast\", \"saturate\", \"opacity\"]);\nfunction applyDefaultFilter(v) {\n    const [name, value] = v.slice(0, -1).split(\"(\");\n    if (name === \"drop-shadow\")\n        return v;\n    const [number] = value.match(floatRegex) || [];\n    if (!number)\n        return v;\n    const unit = value.replace(number, \"\");\n    let defaultValue = maxDefaults.has(name) ? 1 : 0;\n    if (number !== value)\n        defaultValue *= 100;\n    return name + \"(\" + defaultValue + unit + \")\";\n}\nconst functionRegex = /([a-z-]*)\\(.*?\\)/g;\nconst filter = {\n    ...complex,\n    getAnimatableNone: (v) => {\n        const functions = v.match(functionRegex);\n        return functions ? functions.map(applyDefaultFilter).join(\" \") : v;\n    },\n};\n\nexport { filter };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { numberValueTypes } from './number.mjs';\n\n/**\n * A map of default value types for common values\n */\nconst defaultValueTypes = {\n    ...numberValueTypes,\n    // Color props\n    color,\n    backgroundColor: color,\n    outlineColor: color,\n    fill: color,\n    stroke: color,\n    // Border props\n    borderColor: color,\n    borderTopColor: color,\n    borderRightColor: color,\n    borderBottomColor: color,\n    borderLeftColor: color,\n    filter,\n    WebkitFilter: filter,\n};\n/**\n * Gets the default ValueType for the provided value key\n */\nconst getDefaultValueType = (key) => defaultValueTypes[key];\n\nexport { defaultValueTypes, getDefaultValueType };\n","import { complex } from '../../../value/types/complex/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { getDefaultValueType } from './defaults.mjs';\n\nfunction getAnimatableNone(key, value) {\n    let defaultValueType = getDefaultValueType(key);\n    if (defaultValueType !== filter)\n        defaultValueType = complex;\n    // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n    return defaultValueType.getAnimatableNone\n        ? defaultValueType.getAnimatableNone(value)\n        : undefined;\n}\n\nexport { getAnimatableNone };\n","/**\n * Tests a provided value against a ValueType\n */\nconst testValueType = (v) => (type) => type.test(v);\n\nexport { testValueType };\n","/**\n * ValueType for \"auto\"\n */\nconst auto = {\n    test: (v) => v === \"auto\",\n    parse: (v) => v,\n};\n\nexport { auto };\n","import { number } from '../../../value/types/numbers/index.mjs';\nimport { px, percent, degrees, vw, vh } from '../../../value/types/numbers/units.mjs';\nimport { testValueType } from './test.mjs';\nimport { auto } from './type-auto.mjs';\n\n/**\n * A list of value types commonly used for dimensions\n */\nconst dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */\nconst findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));\n\nexport { dimensionValueTypes, findDimensionValueType };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { complex } from '../../../value/types/complex/index.mjs';\nimport { dimensionValueTypes } from './dimensions.mjs';\nimport { testValueType } from './test.mjs';\n\n/**\n * A list of all ValueTypes\n */\nconst valueTypes = [...dimensionValueTypes, color, complex];\n/**\n * Tests a value against the list of ValueTypes\n */\nconst findValueType = (v) => valueTypes.find(testValueType(v));\n\nexport { findValueType };\n","import { resolveVariantFromProps } from './resolve-variants.mjs';\n\n/**\n * Creates an object containing the latest state of every MotionValue on a VisualElement\n */\nfunction getCurrent(visualElement) {\n    const current = {};\n    visualElement.values.forEach((value, key) => (current[key] = value.get()));\n    return current;\n}\n/**\n * Creates an object containing the latest velocity of every MotionValue on a VisualElement\n */\nfunction getVelocity(visualElement) {\n    const velocity = {};\n    visualElement.values.forEach((value, key) => (velocity[key] = value.getVelocity()));\n    return velocity;\n}\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, getCurrent(visualElement), getVelocity(visualElement));\n}\n\nexport { resolveVariant };\n","import { isNumericalString } from '../../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../../utils/is-zero-value-string.mjs';\nimport { resolveFinalValueInKeyframes } from '../../utils/resolve-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\nimport { getAnimatableNone } from '../dom/value-types/animatable-none.mjs';\nimport { findValueType } from '../dom/value-types/find.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {};\n    target = { ...target, ...transitionEnd };\n    for (const key in target) {\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [...variantLabels].reverse();\n    reversedLabels.forEach((key) => {\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        if (visualElement.variantChildren) {\n            visualElement.variantChildren.forEach((child) => {\n                setVariants(child, variantLabels);\n            });\n        }\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\nfunction checkTargetForNewValues(visualElement, target, origin) {\n    var _a, _b;\n    const newValueKeys = Object.keys(target).filter((key) => !visualElement.hasValue(key));\n    const numNewValues = newValueKeys.length;\n    if (!numNewValues)\n        return;\n    for (let i = 0; i < numNewValues; i++) {\n        const key = newValueKeys[i];\n        const targetValue = target[key];\n        let value = null;\n        /**\n         * If the target is a series of keyframes, we can use the first value\n         * in the array. If this first value is null, we'll still need to read from the DOM.\n         */\n        if (Array.isArray(targetValue)) {\n            value = targetValue[0];\n        }\n        /**\n         * If the target isn't keyframes, or the first keyframe was null, we need to\n         * first check if an origin value was explicitly defined in the transition as \"from\",\n         * if not read the value from the DOM. As an absolute fallback, take the defined target value.\n         */\n        if (value === null) {\n            value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];\n        }\n        /**\n         * If value is still undefined or null, ignore it. Preferably this would throw,\n         * but this was causing issues in Framer.\n         */\n        if (value === undefined || value === null)\n            continue;\n        if (typeof value === \"string\" &&\n            (isNumericalString(value) || isZeroValueString(value))) {\n            // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n            value = parseFloat(value);\n        }\n        else if (!findValueType(value) && complex.test(targetValue)) {\n            value = getAnimatableNone(key, targetValue);\n        }\n        visualElement.addValue(key, motionValue(value, { owner: visualElement }));\n        if (origin[key] === undefined) {\n            origin[key] = value;\n        }\n        if (value !== null)\n            visualElement.setBaseTarget(key, value);\n    }\n}\nfunction getOriginFromTransition(key, transition) {\n    if (!transition)\n        return;\n    const valueTransition = transition[key] || transition[\"default\"] || transition;\n    return valueTransition.from;\n}\nfunction getOrigin(target, transition, visualElement) {\n    const origin = {};\n    for (const key in target) {\n        const transitionOrigin = getOriginFromTransition(key, transition);\n        if (transitionOrigin !== undefined) {\n            origin[key] = transitionOrigin;\n        }\n        else {\n            const value = visualElement.getValue(key);\n            if (value) {\n                origin[key] = value.get();\n            }\n        }\n    }\n    return origin;\n}\n\nexport { checkTargetForNewValues, getOrigin, getOriginFromTransition, setTarget, setValues };\n","import { isMotionValue } from '../utils/is-motion-value.mjs';\n\nfunction isWillChangeMotionValue(value) {\n    return Boolean(isMotionValue(value) && value.add);\n}\n\nexport { isWillChangeMotionValue };\n","import { camelToDash } from '../../render/dom/utils/camel-to-dash.mjs';\n\nconst optimizedAppearDataId = \"framerAppearId\";\nconst optimizedAppearDataAttribute = \"data-\" + camelToDash(optimizedAppearDataId);\n\nexport { optimizedAppearDataAttribute, optimizedAppearDataId };\n","var warning = function () { };\r\nvar invariant = function () { };\r\nif (process.env.NODE_ENV !== 'production') {\r\n    warning = function (check, message) {\r\n        if (!check && typeof console !== 'undefined') {\r\n            console.warn(message);\r\n        }\r\n    };\r\n    invariant = function (check, message) {\r\n        if (!check) {\r\n            throw new Error(message);\r\n        }\r\n    };\r\n}\n\nexport { invariant, warning };\n","/**\n * Converts seconds to milliseconds\n *\n * @param seconds - Time in seconds.\n * @return milliseconds - Converted time in milliseconds.\n */\nconst secondsToMilliseconds = (seconds) => seconds * 1000;\n\nexport { secondsToMilliseconds };\n","const instantAnimationState = {\n    current: false,\n};\n\nexport { instantAnimationState };\n","// Accepts an easing function and returns a new one that outputs mirrored values for\n// the second half of the animation. Turns easeIn into easeInOut.\nconst mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n\nexport { mirrorEasing };\n","// Accepts an easing function and returns a new one that outputs reversed values.\n// Turns easeIn into easeOut.\nconst reverseEasing = (easing) => (p) => 1 - easing(1 - p);\n\nexport { reverseEasing };\n","import { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst easeIn = (p) => p * p;\nconst easeOut = reverseEasing(easeIn);\nconst easeInOut = mirrorEasing(easeIn);\n\nexport { easeIn, easeInOut, easeOut };\n","/*\n  Value in range from progress\n\n  Given a lower limit and an upper limit, we return the value within\n  that range as expressed by progress (usually a number from 0 to 1)\n\n  So progress = 0.5 would change\n\n  from -------- to\n\n  to\n\n  from ---- to\n\n  E.g. from = 10, to = 20, progress = 0.5 => 15\n\n  @param [number]: Lower limit of range\n  @param [number]: Upper limit of range\n  @param [number]: The progress between lower and upper limits expressed 0-1\n  @return [number]: Value as calculated from progress within range (not limited within range)\n*/\nconst mix = (from, to, progress) => -progress * from + progress * to + from;\n\nexport { mix };\n","// Adapted from https://gist.github.com/mjackson/5311256\nfunction hueToRgb(p, q, t) {\n    if (t < 0)\n        t += 1;\n    if (t > 1)\n        t -= 1;\n    if (t < 1 / 6)\n        return p + (q - p) * 6 * t;\n    if (t < 1 / 2)\n        return q;\n    if (t < 2 / 3)\n        return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\nfunction hslaToRgba({ hue, saturation, lightness, alpha }) {\n    hue /= 360;\n    saturation /= 100;\n    lightness /= 100;\n    let red = 0;\n    let green = 0;\n    let blue = 0;\n    if (!saturation) {\n        red = green = blue = lightness;\n    }\n    else {\n        const q = lightness < 0.5\n            ? lightness * (1 + saturation)\n            : lightness + saturation - lightness * saturation;\n        const p = 2 * lightness - q;\n        red = hueToRgb(p, q, hue + 1 / 3);\n        green = hueToRgb(p, q, hue);\n        blue = hueToRgb(p, q, hue - 1 / 3);\n    }\n    return {\n        red: Math.round(red * 255),\n        green: Math.round(green * 255),\n        blue: Math.round(blue * 255),\n        alpha,\n    };\n}\n\nexport { hslaToRgba };\n","import { mix } from './mix.mjs';\nimport { invariant } from 'hey-listen';\nimport { hslaToRgba } from './hsla-to-rgba.mjs';\nimport { hex } from '../value/types/color/hex.mjs';\nimport { rgba } from '../value/types/color/rgba.mjs';\nimport { hsla } from '../value/types/color/hsla.mjs';\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nconst mixLinearColor = (from, to, v) => {\n    const fromExpo = from * from;\n    return Math.sqrt(Math.max(0, v * (to * to - fromExpo) + fromExpo));\n};\nconst colorTypes = [hex, rgba, hsla];\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\nfunction asRGBA(color) {\n    const type = getColorType(color);\n    invariant(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);\n    let model = type.parse(color);\n    if (type === hsla) {\n        // TODO Remove this cast - needed since Framer Motion's stricter typing\n        model = hslaToRgba(model);\n    }\n    return model;\n}\nconst mixColor = (from, to) => {\n    const fromRGBA = asRGBA(from);\n    const toRGBA = asRGBA(to);\n    const blended = { ...fromRGBA };\n    return (v) => {\n        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n        blended.alpha = mix(fromRGBA.alpha, toRGBA.alpha, v);\n        return rgba.transform(blended);\n    };\n};\n\nexport { mixColor, mixLinearColor };\n","import { mix } from './mix.mjs';\nimport { mixColor } from './mix-color.mjs';\nimport { pipe } from './pipe.mjs';\nimport { warning } from 'hey-listen';\nimport { color } from '../value/types/color/index.mjs';\nimport { complex, analyseComplexValue } from '../value/types/complex/index.mjs';\n\nfunction getMixer(origin, target) {\n    if (typeof origin === \"number\") {\n        return (v) => mix(origin, target, v);\n    }\n    else if (color.test(origin)) {\n        return mixColor(origin, target);\n    }\n    else {\n        return mixComplex(origin, target);\n    }\n}\nconst mixArray = (from, to) => {\n    const output = [...from];\n    const numValues = output.length;\n    const blendValue = from.map((fromThis, i) => getMixer(fromThis, to[i]));\n    return (v) => {\n        for (let i = 0; i < numValues; i++) {\n            output[i] = blendValue[i](v);\n        }\n        return output;\n    };\n};\nconst mixObject = (origin, target) => {\n    const output = { ...origin, ...target };\n    const blendValue = {};\n    for (const key in output) {\n        if (origin[key] !== undefined && target[key] !== undefined) {\n            blendValue[key] = getMixer(origin[key], target[key]);\n        }\n    }\n    return (v) => {\n        for (const key in blendValue) {\n            output[key] = blendValue[key](v);\n        }\n        return output;\n    };\n};\nconst mixComplex = (origin, target) => {\n    const template = complex.createTransformer(target);\n    const originStats = analyseComplexValue(origin);\n    const targetStats = analyseComplexValue(target);\n    const canInterpolate = originStats.numColors === targetStats.numColors &&\n        originStats.numNumbers >= targetStats.numNumbers;\n    if (canInterpolate) {\n        return pipe(mixArray(originStats.values, targetStats.values), template);\n    }\n    else {\n        warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);\n        return (p) => `${p > 0 ? target : origin}`;\n    }\n};\n\nexport { mixArray, mixComplex, mixObject };\n","/*\n  Progress within given range\n\n  Given a lower limit and an upper limit, we return the progress\n  (expressed as a number 0-1) represented by the given value, and\n  limit that progress to within 0-1.\n\n  @param [number]: Lower limit\n  @param [number]: Upper limit\n  @param [number]: Value to find progress within given range\n  @return [number]: Progress of value within range as expressed 0-1\n*/\nconst progress = (from, to, value) => {\n    const toFromDifference = to - from;\n    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;\n};\n\nexport { progress };\n","import { invariant } from 'hey-listen';\nimport { color } from '../value/types/color/index.mjs';\nimport { clamp } from './clamp.mjs';\nimport { mix } from './mix.mjs';\nimport { mixColor } from './mix-color.mjs';\nimport { mixComplex, mixArray, mixObject } from './mix-complex.mjs';\nimport { pipe } from './pipe.mjs';\nimport { progress } from './progress.mjs';\n\nconst mixNumber = (from, to) => (p) => mix(from, to, p);\nfunction detectMixerFactory(v) {\n    if (typeof v === \"number\") {\n        return mixNumber;\n    }\n    else if (typeof v === \"string\") {\n        if (color.test(v)) {\n            return mixColor;\n        }\n        else {\n            return mixComplex;\n        }\n    }\n    else if (Array.isArray(v)) {\n        return mixArray;\n    }\n    else if (typeof v === \"object\") {\n        return mixObject;\n    }\n    return mixNumber;\n}\nfunction createMixers(output, ease, customMixer) {\n    const mixers = [];\n    const mixerFactory = customMixer || detectMixerFactory(output[0]);\n    const numMixers = output.length - 1;\n    for (let i = 0; i < numMixers; i++) {\n        let mixer = mixerFactory(output[i], output[i + 1]);\n        if (ease) {\n            const easingFunction = Array.isArray(ease) ? ease[i] : ease;\n            mixer = pipe(easingFunction, mixer);\n        }\n        mixers.push(mixer);\n    }\n    return mixers;\n}\n/**\n * Create a function that maps from a numerical input array to a generic output array.\n *\n * Accepts:\n *   - Numbers\n *   - Colors (hex, hsl, hsla, rgb, rgba)\n *   - Complex (combinations of one or more numbers or strings)\n *\n * ```jsx\n * const mixColor = interpolate([0, 1], ['#fff', '#000'])\n *\n * mixColor(0.5) // 'rgba(128, 128, 128, 1)'\n * ```\n *\n * TODO Revist this approach once we've moved to data models for values,\n * probably not needed to pregenerate mixer functions.\n *\n * @public\n */\nfunction interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {\n    const inputLength = input.length;\n    invariant(inputLength === output.length, \"Both input and output ranges must be the same length\");\n    invariant(!ease || !Array.isArray(ease) || ease.length === inputLength - 1, \"Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values.\");\n    // If input runs highest -> lowest, reverse both arrays\n    if (input[0] > input[inputLength - 1]) {\n        input = [...input].reverse();\n        output = [...output].reverse();\n    }\n    const mixers = createMixers(output, ease, mixer);\n    const numMixers = mixers.length;\n    const interpolator = (v) => {\n        let i = 0;\n        if (numMixers > 1) {\n            for (; i < input.length - 2; i++) {\n                if (v < input[i + 1])\n                    break;\n            }\n        }\n        const progressInRange = progress(input[i], input[i + 1], v);\n        return mixers[i](progressInRange);\n    };\n    return isClamp\n        ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v))\n        : interpolator;\n}\n\nexport { interpolate };\n","import { noop } from '../utils/noop.mjs';\n\n/*\n  Bezier function generator\n  This has been modified from Gaëtan Renaudeau's BezierEasing\n  https://github.com/gre/bezier-easing/blob/master/src/index.js\n  https://github.com/gre/bezier-easing/blob/master/LICENSE\n  \n  I've removed the newtonRaphsonIterate algo because in benchmarking it\n  wasn't noticiably faster than binarySubdivision, indeed removing it\n  usually improved times, depending on the curve.\n  I also removed the lookup table, as for the added bundle size and loop we're\n  only cutting ~4 or so subdivision iterations. I bumped the max iterations up\n  to 12 to compensate and this still tended to be faster for no perceivable\n  loss in accuracy.\n  Usage\n    const easeOut = cubicBezier(.17,.67,.83,.67);\n    const x = easeOut(0.5); // returns 0.627...\n*/\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nconst calcBezier = (t, a1, a2) => (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) *\n    t;\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 12;\nfunction binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = lowerBound + (upperBound - lowerBound) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - x;\n        if (currentX > 0.0) {\n            upperBound = currentT;\n        }\n        else {\n            lowerBound = currentT;\n        }\n    } while (Math.abs(currentX) > subdivisionPrecision &&\n        ++i < subdivisionMaxIterations);\n    return currentT;\n}\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    // If this is a linear gradient, return linear easing\n    if (mX1 === mY1 && mX2 === mY2)\n        return noop;\n    const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);\n    // If animation is at start/end, return t without easing\n    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\n\nexport { cubicBezier };\n","import { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst circIn = (p) => 1 - Math.sin(Math.acos(p));\nconst circOut = reverseEasing(circIn);\nconst circInOut = mirrorEasing(circOut);\n\nexport { circIn, circInOut, circOut };\n","import { cubicBezier } from './cubic-bezier.mjs';\nimport { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst backOut = cubicBezier(0.33, 1.53, 0.69, 0.99);\nconst backIn = reverseEasing(backOut);\nconst backInOut = mirrorEasing(backIn);\n\nexport { backIn, backInOut, backOut };\n","import { backIn } from './back.mjs';\n\nconst anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n\nexport { anticipate };\n","import { invariant } from 'hey-listen';\nimport { cubicBezier } from '../../easing/cubic-bezier.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { easeIn, easeInOut, easeOut } from '../../easing/ease.mjs';\nimport { circIn, circInOut, circOut } from '../../easing/circ.mjs';\nimport { backIn, backInOut, backOut } from '../../easing/back.mjs';\nimport { anticipate } from '../../easing/anticipate.mjs';\n\nconst easingLookup = {\n    linear: noop,\n    easeIn,\n    easeInOut,\n    easeOut,\n    circIn,\n    circInOut,\n    circOut,\n    backIn,\n    backInOut,\n    backOut,\n    anticipate,\n};\nconst easingDefinitionToFunction = (definition) => {\n    if (Array.isArray(definition)) {\n        // If cubic bezier definition, create bezier curve\n        invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);\n        const [x1, y1, x2, y2] = definition;\n        return cubicBezier(x1, y1, x2, y2);\n    }\n    else if (typeof definition === \"string\") {\n        // Else lookup from table\n        invariant(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);\n        return easingLookup[definition];\n    }\n    return definition;\n};\nconst isEasingArray = (ease) => {\n    return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\n\nexport { easingDefinitionToFunction, isEasingArray };\n","import { easeInOut } from '../../easing/ease.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { isEasingArray, easingDefinitionToFunction } from '../utils/easing.mjs';\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction defaultOffset(values) {\n    const numValues = values.length;\n    return values.map((_value, i) => i !== 0 ? i / (numValues - 1) : 0);\n}\nfunction convertOffsetToTimes(offset, duration) {\n    return offset.map((o) => o * duration);\n}\nfunction keyframes({ keyframes: keyframeValues, ease = easeInOut, times, duration = 300, }) {\n    keyframeValues = [...keyframeValues];\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */\n    const easingFunctions = isEasingArray(ease)\n        ? ease.map(easingDefinitionToFunction)\n        : easingDefinitionToFunction(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = {\n        done: false,\n        value: keyframeValues[0],\n    };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */\n    const absoluteTimes = convertOffsetToTimes(\n    // Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframeValues.length\n        ? times\n        : defaultOffset(keyframeValues), duration);\n    function createInterpolator() {\n        return interpolate(absoluteTimes, keyframeValues, {\n            ease: Array.isArray(easingFunctions)\n                ? easingFunctions\n                : defaultEasing(keyframeValues, easingFunctions),\n        });\n    }\n    let interpolator = createInterpolator();\n    return {\n        next: (t) => {\n            state.value = interpolator(t);\n            state.done = t >= duration;\n            return state;\n        },\n        flipTarget: () => {\n            keyframeValues.reverse();\n            interpolator = createInterpolator();\n        },\n    };\n}\n\nexport { convertOffsetToTimes, defaultEasing, defaultOffset, keyframes };\n","import { warning } from 'hey-listen';\nimport { clamp } from '../../utils/clamp.mjs';\n\nconst safeMin = 0.001;\nconst minDuration = 0.01;\nconst maxDuration = 10.0;\nconst minDamping = 0.05;\nconst maxDamping = 1;\nfunction findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1, }) {\n    let envelope;\n    let derivative;\n    warning(duration <= maxDuration * 1000, \"Spring duration must be 10 seconds or less\");\n    let dampingRatio = 1 - bounce;\n    /**\n     * Restrict dampingRatio and duration to within acceptable ranges.\n     */\n    dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n    duration = clamp(minDuration, maxDuration, duration / 1000);\n    if (dampingRatio < 1) {\n        /**\n         * Underdamped spring\n         */\n        envelope = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const a = exponentialDecay - velocity;\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\n            const c = Math.exp(-delta);\n            return safeMin - (a / b) * c;\n        };\n        derivative = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const d = delta * velocity + velocity;\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n            const f = Math.exp(-delta);\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n            return (factor * ((d - e) * f)) / g;\n        };\n    }\n    else {\n        /**\n         * Critically-damped spring\n         */\n        envelope = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (undampedFreq - velocity) * duration + 1;\n            return -safeMin + a * b;\n        };\n        derivative = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (velocity - undampedFreq) * (duration * duration);\n            return a * b;\n        };\n    }\n    const initialGuess = 5 / duration;\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n    duration = duration * 1000;\n    if (isNaN(undampedFreq)) {\n        return {\n            stiffness: 100,\n            damping: 10,\n            duration,\n        };\n    }\n    else {\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\n        return {\n            stiffness,\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n            duration,\n        };\n    }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n    let result = initialGuess;\n    for (let i = 1; i < rootIterations; i++) {\n        result = result - envelope(result) / derivative(result);\n    }\n    return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n\nexport { calcAngularFreq, findSpring, maxDamping, maxDuration, minDamping, minDuration };\n","import { findSpring, calcAngularFreq } from './find-spring.mjs';\nimport { velocityPerSecond } from '../../utils/velocity-per-second.mjs';\n\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n    return keys.some((key) => options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = {\n        velocity: 0.0,\n        stiffness: 100,\n        damping: 10,\n        mass: 1.0,\n        isResolvedFromDuration: false,\n        ...options,\n    };\n    // stiffness/damping/mass overrides duration/bounce\n    if (!isSpringType(options, physicsKeys) &&\n        isSpringType(options, durationKeys)) {\n        const derived = findSpring(options);\n        springOptions = {\n            ...springOptions,\n            ...derived,\n            velocity: 0.0,\n            mass: 1.0,\n        };\n        springOptions.isResolvedFromDuration = true;\n    }\n    return springOptions;\n}\nconst velocitySampleDuration = 5;\n/**\n * This is based on the spring implementation of Wobble https://github.com/skevy/wobble\n */\nfunction spring({ keyframes, restDelta, restSpeed, ...options }) {\n    let origin = keyframes[0];\n    let target = keyframes[keyframes.length - 1];\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: origin };\n    const { stiffness, damping, mass, velocity, duration, isResolvedFromDuration, } = getSpringOptions(options);\n    let resolveSpring = zero;\n    let initialVelocity = velocity ? -(velocity / 1000) : 0.0;\n    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    function createSpring() {\n        const initialDelta = target - origin;\n        const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n        /**\n         * If we're working on a granular scale, use smaller defaults for determining\n         * when the spring is finished.\n         *\n         * These defaults have been selected emprically based on what strikes a good\n         * ratio between feeling good and finishing as soon as changes are imperceptible.\n         */\n        const isGranularScale = Math.abs(initialDelta) < 5;\n        restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);\n        restDelta || (restDelta = isGranularScale ? 0.005 : 0.5);\n        if (dampingRatio < 1) {\n            const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n            // Underdamped spring\n            resolveSpring = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                return (target -\n                    envelope *\n                        (((initialVelocity +\n                            dampingRatio * undampedAngularFreq * initialDelta) /\n                            angularFreq) *\n                            Math.sin(angularFreq * t) +\n                            initialDelta * Math.cos(angularFreq * t)));\n            };\n        }\n        else if (dampingRatio === 1) {\n            // Critically damped spring\n            resolveSpring = (t) => target -\n                Math.exp(-undampedAngularFreq * t) *\n                    (initialDelta +\n                        (initialVelocity + undampedAngularFreq * initialDelta) *\n                            t);\n        }\n        else {\n            // Overdamped spring\n            const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n            resolveSpring = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                // When performing sinh or cosh values can hit Infinity so we cap them here\n                const freqForT = Math.min(dampedAngularFreq * t, 300);\n                return (target -\n                    (envelope *\n                        ((initialVelocity +\n                            dampingRatio * undampedAngularFreq * initialDelta) *\n                            Math.sinh(freqForT) +\n                            dampedAngularFreq *\n                                initialDelta *\n                                Math.cosh(freqForT))) /\n                        dampedAngularFreq);\n            };\n        }\n    }\n    createSpring();\n    return {\n        next: (t) => {\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                let currentVelocity = initialVelocity;\n                if (t !== 0) {\n                    /**\n                     * We only need to calculate velocity for under-damped springs\n                     * as over- and critically-damped springs can't overshoot, so\n                     * checking only for displacement is enough.\n                     */\n                    if (dampingRatio < 1) {\n                        const prevT = Math.max(0, t - velocitySampleDuration);\n                        currentVelocity = velocityPerSecond(current - resolveSpring(prevT), t - prevT);\n                    }\n                    else {\n                        currentVelocity = 0;\n                    }\n                }\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;\n                state.done =\n                    isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            }\n            else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? target : current;\n            return state;\n        },\n        flipTarget: () => {\n            initialVelocity = -initialVelocity;\n            [origin, target] = [target, origin];\n            createSpring();\n        },\n    };\n}\nspring.needsInterpolation = (a, b) => typeof a === \"string\" || typeof b === \"string\";\nconst zero = (_t) => 0;\n\nexport { spring };\n","function decay({ \n/**\n * The decay animation dynamically calculates an end of the animation\n * based on the initial keyframe, so we only need to define a single keyframe\n * as default.\n */\nkeyframes = [0], velocity = 0, power = 0.8, timeConstant = 350, restDelta = 0.5, modifyTarget, }) {\n    const origin = keyframes[0];\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: origin };\n    let amplitude = power * velocity;\n    const ideal = origin + amplitude;\n    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n    /**\n     * If the target has changed we need to re-calculate the amplitude, otherwise\n     * the animation will start from the wrong position.\n     */\n    if (target !== ideal)\n        amplitude = target - origin;\n    return {\n        next: (t) => {\n            const delta = -amplitude * Math.exp(-t / timeConstant);\n            state.done = !(delta > restDelta || delta < -restDelta);\n            state.value = state.done ? target : target + delta;\n            return state;\n        },\n        flipTarget: () => { },\n    };\n}\n\nexport { decay };\n","import { keyframes } from './keyframes.mjs';\nimport { spring } from './spring.mjs';\nimport { decay } from './decay.mjs';\nimport { sync, cancelSync } from '../../frameloop/index.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\n\nconst types = {\n    decay,\n    keyframes: keyframes,\n    tween: keyframes,\n    spring,\n};\nfunction loopElapsed(elapsed, duration, delay = 0) {\n    return elapsed - duration - delay;\n}\nfunction reverseElapsed(elapsed, duration = 0, delay = 0, isForwardPlayback = true) {\n    return isForwardPlayback\n        ? loopElapsed(duration + -elapsed, duration, delay)\n        : duration - (elapsed - duration) + delay;\n}\nfunction hasRepeatDelayElapsed(elapsed, duration, delay, isForwardPlayback) {\n    return isForwardPlayback ? elapsed >= duration + delay : elapsed <= -delay;\n}\nconst framesync = (update) => {\n    const passTimestamp = ({ delta }) => update(delta);\n    return {\n        start: () => sync.update(passTimestamp, true),\n        stop: () => cancelSync.update(passTimestamp),\n    };\n};\nfunction animate({ duration, driver = framesync, elapsed = 0, repeat: repeatMax = 0, repeatType = \"loop\", repeatDelay = 0, keyframes: keyframes$1, autoplay = true, onPlay, onStop, onComplete, onRepeat, onUpdate, type = \"keyframes\", ...options }) {\n    const initialElapsed = elapsed;\n    let driverControls;\n    let repeatCount = 0;\n    let computedDuration = duration;\n    let isComplete = false;\n    let isForwardPlayback = true;\n    let interpolateFromNumber;\n    const animator = types[keyframes$1.length > 2 ? \"keyframes\" : type] || keyframes;\n    const origin = keyframes$1[0];\n    const target = keyframes$1[keyframes$1.length - 1];\n    let state = { done: false, value: origin };\n    /**\n     * If this value needs interpolation (ie is non-numerical), set up an interpolator.\n     * TODO: Keyframes animation also performs this step. This could be removed so it only happens here.\n     */\n    const { needsInterpolation } = animator;\n    if (needsInterpolation && needsInterpolation(origin, target)) {\n        interpolateFromNumber = interpolate([0, 100], [origin, target], {\n            clamp: false,\n        });\n        keyframes$1 = [0, 100];\n    }\n    const animation = animator({\n        ...options,\n        duration,\n        keyframes: keyframes$1,\n    });\n    function repeat() {\n        repeatCount++;\n        if (repeatType === \"reverse\") {\n            isForwardPlayback = repeatCount % 2 === 0;\n            elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);\n        }\n        else {\n            elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);\n            if (repeatType === \"mirror\")\n                animation.flipTarget();\n        }\n        isComplete = false;\n        onRepeat && onRepeat();\n    }\n    function complete() {\n        driverControls && driverControls.stop();\n        onComplete && onComplete();\n    }\n    function update(delta) {\n        if (!isForwardPlayback)\n            delta = -delta;\n        elapsed += delta;\n        if (!isComplete) {\n            state = animation.next(Math.max(0, elapsed));\n            if (interpolateFromNumber)\n                state.value = interpolateFromNumber(state.value);\n            isComplete = isForwardPlayback ? state.done : elapsed <= 0;\n        }\n        onUpdate && onUpdate(state.value);\n        if (isComplete) {\n            if (repeatCount === 0) {\n                computedDuration =\n                    computedDuration !== undefined ? computedDuration : elapsed;\n            }\n            if (repeatCount < repeatMax) {\n                hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat();\n            }\n            else {\n                complete();\n            }\n        }\n    }\n    function play() {\n        onPlay && onPlay();\n        driverControls = driver(update);\n        driverControls.start();\n    }\n    autoplay && play();\n    return {\n        stop: () => {\n            onStop && onStop();\n            driverControls && driverControls.stop();\n        },\n        /**\n         * Set the current time of the animation. This is purposefully\n         * mirroring the WAAPI animation API to make them interchanagable.\n         * Going forward this file should be ported more towards\n         * https://github.com/motiondivision/motionone/blob/main/packages/animation/src/Animation.ts\n         * Which behaviourally adheres to WAAPI as far as possible.\n         *\n         * WARNING: This is not safe to use for most animations. We currently\n         * only use it for handoff from WAAPI within Framer.\n         *\n         * This animation function consumes time every frame rather than being sampled for time.\n         * So the sample() method performs some headless frames to ensure\n         * repeats are handled correctly. Ideally in the future we will replace\n         * that method with this, once repeat calculations are pure.\n         */\n        set currentTime(t) {\n            elapsed = initialElapsed;\n            update(t);\n        },\n        /**\n         * animate() can't yet be sampled for time, instead it\n         * consumes time. So to sample it we have to run a low\n         * temporal-resolution version.\n         */\n        sample: (t) => {\n            elapsed = initialElapsed;\n            const sampleResolution = duration && typeof duration === \"number\"\n                ? Math.max(duration * 0.5, 50)\n                : 50;\n            let sampleElapsed = 0;\n            update(0);\n            while (sampleElapsed <= t) {\n                const remaining = t - sampleElapsed;\n                update(Math.min(remaining, sampleResolution));\n                sampleElapsed += sampleResolution;\n            }\n            return state;\n        },\n    };\n}\n\nexport { animate, hasRepeatDelayElapsed, loopElapsed, reverseElapsed };\n","function isWaapiSupportedEasing(easing) {\n    return (!easing || // Default easing\n        Array.isArray(easing) || // Bezier curve\n        (typeof easing === \"string\" && supportedWaapiEasing[easing]));\n}\nconst cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;\nconst supportedWaapiEasing = {\n    linear: \"linear\",\n    ease: \"ease\",\n    easeIn: \"ease-in\",\n    easeOut: \"ease-out\",\n    easeInOut: \"ease-in-out\",\n    circIn: cubicBezierAsString([0, 0.65, 0.55, 1]),\n    circOut: cubicBezierAsString([0.55, 0, 1, 0.45]),\n    backIn: cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),\n    backOut: cubicBezierAsString([0.33, 1.53, 0.69, 0.99]),\n};\nfunction mapEasingToNativeEasing(easing) {\n    if (!easing)\n        return undefined;\n    return Array.isArray(easing)\n        ? cubicBezierAsString(easing)\n        : supportedWaapiEasing[easing];\n}\n\nexport { cubicBezierAsString, isWaapiSupportedEasing, mapEasingToNativeEasing, supportedWaapiEasing };\n","import { mapEasingToNativeEasing } from './easing.mjs';\n\nfunction animateStyle(element, valueName, keyframes, { delay = 0, duration, repeat = 0, repeatType = \"loop\", ease, times, } = {}) {\n    return element.animate({ [valueName]: keyframes, offset: times }, {\n        delay,\n        duration,\n        easing: mapEasingToNativeEasing(ease),\n        fill: \"both\",\n        iterations: repeat + 1,\n        direction: repeatType === \"reverse\" ? \"alternate\" : \"normal\",\n    });\n}\n\nexport { animateStyle };\n","const featureTests = {\n    waapi: () => Object.hasOwnProperty.call(Element.prototype, \"animate\"),\n};\nconst results = {};\nconst supports = {};\n/**\n * Generate features tests that cache their results.\n */\nfor (const key in featureTests) {\n    supports[key] = () => {\n        if (results[key] === undefined)\n            results[key] = featureTests[key]();\n        return results[key];\n    };\n}\n\nexport { supports };\n","function getFinalKeyframe(keyframes, { repeat, repeatType = \"loop\" }) {\n    const index = repeat && repeatType !== \"loop\" && repeat % 2 === 1\n        ? 0\n        : keyframes.length - 1;\n    return keyframes[index];\n}\n\nexport { getFinalKeyframe };\n","import { sync } from '../../frameloop/index.mjs';\nimport { animate } from '../legacy-popmotion/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\n\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\"opacity\"]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    const canAccelerateAnimation = supports.waapi() &&\n        acceleratedValues.has(valueName) &&\n        !options.repeatDelay &&\n        options.repeatType !== \"mirror\" &&\n        options.damping !== 0;\n    if (!canAccelerateAnimation)\n        return false;\n    let { keyframes, duration = 300, elapsed = 0, ease } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (options.type === \"spring\" || !isWaapiSupportedEasing(options.ease)) {\n        /**\n         * If we need to pre-generate keyframes and repeat is infinite then\n         * early return as this will lock the thread.\n         */\n        if (options.repeat === Infinity)\n            return;\n        const sampleAnimation = animate({ ...options, elapsed: 0 });\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        /**\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\n         * we're heading for an infinite loop.\n         */\n        let t = 0;\n        while (!state.done && t < 20000) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        delay: -elapsed,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n    });\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        value.set(getFinalKeyframe(keyframes, options));\n        sync.update(() => animation.cancel());\n        onComplete && onComplete();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    return {\n        get currentTime() {\n            return animation.currentTime || 0;\n        },\n        set currentTime(t) {\n            animation.currentTime = t;\n        },\n        stop: () => {\n            /**\n             * WAAPI doesn't natively have any interruption capabilities.\n             *\n             * Rather than read commited styles back out of the DOM, we can\n             * create a renderless JS animation and sample it twice to calculate\n             * its current value, \"previous\" value, and therefore allow\n             * Motion to calculate velocity for any subsequent animation.\n             */\n            const { currentTime } = animation;\n            if (currentTime) {\n                const sampleAnimation = animate({ ...options, autoplay: false });\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n            }\n            sync.update(() => animation.cancel());\n        },\n    };\n}\n\nexport { createAcceleratedAnimation };\n","import { sync, cancelSync } from '../frameloop/index.mjs';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = performance.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelSync.read(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    sync.read(checkElapsed, true);\n    return () => cancelSync.read(checkElapsed);\n}\n\nexport { delay };\n","import { delay } from '../utils/delay.mjs';\n\nfunction createInstantAnimation({ keyframes, elapsed, onUpdate, onComplete, }) {\n    const setValue = () => {\n        onUpdate && onUpdate(keyframes[keyframes.length - 1]);\n        onComplete && onComplete();\n    };\n    return elapsed ? { stop: delay(setValue, -elapsed) } : setValue();\n}\n\nexport { createInstantAnimation };\n","import { animate } from './index.mjs';\nimport { velocityPerSecond } from '../../utils/velocity-per-second.mjs';\nimport { frameData } from '../../frameloop/data.mjs';\n\nfunction inertia({ keyframes, velocity = 0, min, max, power = 0.8, timeConstant = 750, bounceStiffness = 500, bounceDamping = 10, restDelta = 1, modifyTarget, driver, onUpdate, onComplete, onStop, }) {\n    const origin = keyframes[0];\n    let currentAnimation;\n    function isOutOfBounds(v) {\n        return (min !== undefined && v < min) || (max !== undefined && v > max);\n    }\n    function findNearestBoundary(v) {\n        if (min === undefined)\n            return max;\n        if (max === undefined)\n            return min;\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    }\n    function startAnimation(options) {\n        currentAnimation && currentAnimation.stop();\n        currentAnimation = animate({\n            keyframes: [0, 1],\n            velocity: 0,\n            ...options,\n            driver,\n            onUpdate: (v) => {\n                onUpdate && onUpdate(v);\n                options.onUpdate && options.onUpdate(v);\n            },\n            onComplete,\n            onStop,\n        });\n    }\n    function startSpring(options) {\n        startAnimation({\n            type: \"spring\",\n            stiffness: bounceStiffness,\n            damping: bounceDamping,\n            restDelta,\n            ...options,\n        });\n    }\n    if (isOutOfBounds(origin)) {\n        // Start the animation with spring if outside the defined boundaries\n        startSpring({\n            velocity,\n            keyframes: [origin, findNearestBoundary(origin)],\n        });\n    }\n    else {\n        /**\n         * Or if the value is out of bounds, simulate the inertia movement\n         * with the decay animation.\n         *\n         * Pre-calculate the target so we can detect if it's out-of-bounds.\n         * If it is, we want to check per frame when to switch to a spring\n         * animation\n         */\n        let target = power * velocity + origin;\n        if (typeof modifyTarget !== \"undefined\")\n            target = modifyTarget(target);\n        const boundary = findNearestBoundary(target);\n        const heading = boundary === min ? -1 : 1;\n        let prev;\n        let current;\n        const checkBoundary = (v) => {\n            prev = current;\n            current = v;\n            velocity = velocityPerSecond(v - prev, frameData.delta);\n            if ((heading === 1 && v > boundary) ||\n                (heading === -1 && v < boundary)) {\n                startSpring({ keyframes: [v, boundary], velocity });\n            }\n        };\n        startAnimation({\n            type: \"decay\",\n            keyframes: [origin, 0],\n            velocity,\n            timeConstant,\n            power,\n            restDelta,\n            modifyTarget,\n            onUpdate: isOutOfBounds(target) ? checkBoundary : undefined,\n        });\n    }\n    return {\n        stop: () => currentAnimation && currentAnimation.stop(),\n    };\n}\n\nexport { inertia };\n","const underDampedSpring = () => ({\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10,\n});\nconst criticallyDampedSpring = (target) => ({\n    type: \"spring\",\n    stiffness: 550,\n    damping: target === 0 ? 2 * Math.sqrt(550) : 30,\n    restSpeed: 10,\n});\nconst linearTween = () => ({\n    type: \"keyframes\",\n    ease: \"linear\",\n    duration: 0.3,\n});\nconst keyframesTransition = {\n    type: \"keyframes\",\n    duration: 0.8,\n};\nconst defaultTransitions = {\n    x: underDampedSpring,\n    y: underDampedSpring,\n    z: underDampedSpring,\n    rotate: underDampedSpring,\n    rotateX: underDampedSpring,\n    rotateY: underDampedSpring,\n    rotateZ: underDampedSpring,\n    scaleX: criticallyDampedSpring,\n    scaleY: criticallyDampedSpring,\n    scale: criticallyDampedSpring,\n    opacity: linearTween,\n    backgroundColor: linearTween,\n    color: linearTween,\n    default: criticallyDampedSpring,\n};\nconst getDefaultTransition = (valueKey, { keyframes }) => {\n    if (keyframes.length > 2) {\n        return keyframesTransition;\n    }\n    else {\n        const factory = defaultTransitions[valueKey] || defaultTransitions.default;\n        return factory(keyframes[1]);\n    }\n};\n\nexport { criticallyDampedSpring, getDefaultTransition, linearTween, underDampedSpring };\n","import { complex } from '../../value/types/complex/index.mjs';\n\n/**\n * Check if a value is animatable. Examples:\n *\n * ✅: 100, \"100px\", \"#fff\"\n * ❌: \"block\", \"url(2.jpg)\"\n * @param value\n *\n * @internal\n */\nconst isAnimatable = (key, value) => {\n    // If the list of keys tat might be non-animatable grows, replace with Set\n    if (key === \"zIndex\")\n        return false;\n    // If it's a number or a keyframes array, we can animate it. We might at some point\n    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,\n    // but for now lets leave it like this for performance reasons\n    if (typeof value === \"number\" || Array.isArray(value))\n        return true;\n    if (typeof value === \"string\" && // It's animatable if we have a string\n        complex.test(value) && // And it contains numbers and/or colors\n        !value.startsWith(\"url(\") // Unless it starts with \"url(\"\n    ) {\n        return true;\n    }\n    return false;\n};\n\nexport { isAnimatable };\n","import { getAnimatableNone } from '../../render/dom/value-types/animatable-none.mjs';\n\n/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */\nfunction isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {\n    return !!Object.keys(transition).length;\n}\nfunction isZero(value) {\n    return (value === 0 ||\n        (typeof value === \"string\" &&\n            parseFloat(value) === 0 &&\n            value.indexOf(\" \") === -1));\n}\nfunction getZeroUnit(potentialUnitType) {\n    return typeof potentialUnitType === \"number\"\n        ? 0\n        : getAnimatableNone(\"\", potentialUnitType);\n}\nfunction getValueTransition(transition, key) {\n    return transition[key] || transition[\"default\"] || transition;\n}\n\nexport { getValueTransition, getZeroUnit, isTransitionDefined, isZero };\n","import { getAnimatableNone } from '../../render/dom/value-types/animatable-none.mjs';\nimport { isAnimatable } from './is-animatable.mjs';\nimport { isZero, getZeroUnit } from './transitions.mjs';\n\nfunction getKeyframes(value, valueName, target, transition) {\n    const isTargetAnimatable = isAnimatable(valueName, target);\n    let origin = transition.from !== undefined ? transition.from : value.get();\n    if (origin === \"none\" && isTargetAnimatable && typeof target === \"string\") {\n        /**\n         * If we're trying to animate from \"none\", try and get an animatable version\n         * of the target. This could be improved to work both ways.\n         */\n        origin = getAnimatableNone(valueName, target);\n    }\n    else if (isZero(origin) && typeof target === \"string\") {\n        origin = getZeroUnit(target);\n    }\n    else if (!Array.isArray(target) &&\n        isZero(target) &&\n        typeof origin === \"string\") {\n        target = getZeroUnit(origin);\n    }\n    /**\n     * If the target has been defined as a series of keyframes\n     */\n    if (Array.isArray(target)) {\n        /**\n         * Ensure an initial wildcard keyframe is hydrated by the origin.\n         * TODO: Support extra wildcard keyframes i.e [1, null, 0]\n         */\n        if (target[0] === null) {\n            target[0] = origin;\n        }\n        return target;\n    }\n    else {\n        return [origin, target];\n    }\n}\n\nexport { getKeyframes };\n","import { warning } from 'hey-listen';\nimport { secondsToMilliseconds } from '../utils/time-conversion.mjs';\nimport { instantAnimationState } from '../utils/use-instant-transition-state.mjs';\nimport { createAcceleratedAnimation } from './waapi/create-accelerated-animation.mjs';\nimport { createInstantAnimation } from './create-instant-animation.mjs';\nimport { animate } from './legacy-popmotion/index.mjs';\nimport { inertia } from './legacy-popmotion/inertia.mjs';\nimport { getDefaultTransition } from './utils/default-transitions.mjs';\nimport { isAnimatable } from './utils/is-animatable.mjs';\nimport { getKeyframes } from './utils/keyframes.mjs';\nimport { getValueTransition, isTransitionDefined } from './utils/transitions.mjs';\n\nconst createMotionValueAnimation = (valueName, value, target, transition = {}) => {\n    return (onComplete) => {\n        const valueTransition = getValueTransition(transition, valueName) || {};\n        /**\n         * Most transition values are currently completely overwritten by value-specific\n         * transitions. In the future it'd be nicer to blend these transitions. But for now\n         * delay actually does inherit from the root transition if not value-specific.\n         */\n        const delay = valueTransition.delay || transition.delay || 0;\n        /**\n         * Elapsed isn't a public transition option but can be passed through from\n         * optimized appear effects in milliseconds.\n         */\n        let { elapsed = 0 } = transition;\n        elapsed = elapsed - secondsToMilliseconds(delay);\n        const keyframes = getKeyframes(value, valueName, target, valueTransition);\n        /**\n         * Check if we're able to animate between the start and end keyframes,\n         * and throw a warning if we're attempting to animate between one that's\n         * animatable and another that isn't.\n         */\n        const originKeyframe = keyframes[0];\n        const targetKeyframe = keyframes[keyframes.length - 1];\n        const isOriginAnimatable = isAnimatable(valueName, originKeyframe);\n        const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);\n        warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from \"${originKeyframe}\" to \"${targetKeyframe}\". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \\`style\\` property.`);\n        let options = {\n            keyframes,\n            velocity: value.getVelocity(),\n            ...valueTransition,\n            elapsed,\n            onUpdate: (v) => {\n                value.set(v);\n                valueTransition.onUpdate && valueTransition.onUpdate(v);\n            },\n            onComplete: () => {\n                onComplete();\n                valueTransition.onComplete && valueTransition.onComplete();\n            },\n        };\n        if (!isOriginAnimatable ||\n            !isTargetAnimatable ||\n            instantAnimationState.current ||\n            valueTransition.type === false) {\n            /**\n             * If we can't animate this value, or the global instant animation flag is set,\n             * or this is simply defined as an instant transition, return an instant transition.\n             */\n            return createInstantAnimation(options);\n        }\n        else if (valueTransition.type === \"inertia\") {\n            /**\n             * If this is an inertia animation, we currently don't support pre-generating\n             * keyframes for this as such it must always run on the main thread.\n             */\n            return inertia(options);\n        }\n        /**\n         * If there's no transition defined for this value, we can generate\n         * unqiue transition settings for this value.\n         */\n        if (!isTransitionDefined(valueTransition)) {\n            options = {\n                ...options,\n                ...getDefaultTransition(valueName, options),\n            };\n        }\n        /**\n         * Both WAAPI and our internal animation functions use durations\n         * as defined by milliseconds, while our external API defines them\n         * as seconds.\n         */\n        if (options.duration) {\n            options.duration = secondsToMilliseconds(options.duration);\n        }\n        if (options.repeatDelay) {\n            options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n        }\n        /**\n         * Animate via WAAPI if possible.\n         */\n        if (value.owner &&\n            value.owner.current instanceof HTMLElement &&\n            !value.owner.getProps().onUpdate) {\n            const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);\n            if (acceleratedAnimation)\n                return acceleratedAnimation;\n        }\n        /**\n         * If we didn't create an accelerated animation, create a JS animation\n         */\n        return animate(options);\n    };\n};\n\nexport { createMotionValueAnimation };\n","import { setTarget } from './setters.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { createMotionValueAnimation } from '../../animation/index.mjs';\nimport { sync } from '../../frameloop/index.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = animateTarget(visualElement, resolvedDefinition, options);\n    }\n    return animation.then(() => visualElement.notify(\"AnimationComplete\", definition));\n}\nfunction animateVariant(visualElement, variant, options = {}) {\n    const resolved = resolveVariant(visualElement, variant, options.custom);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => animateTarget(visualElement, resolved, options)\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(last);\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\n/**\n * @internal\n */\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = { delay, elapsed: 0, ...transition };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        if (window.HandoffAppearAnimations && !value.hasAnimated) {\n            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n            if (appearId) {\n                valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, sync);\n            }\n        }\n        let animation = value.start(createMotionValueAnimation(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition));\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation = animation.then(() => willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    return Promise.all(animations).then(() => {\n        transitionEnd && setTarget(visualElement, transitionEnd);\n    });\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1\n        ? (i = 0) => i * staggerChildren\n        : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value) => value.stop());\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\n\nexport { animateVisualElement, sortByTreeOrder, stopAnimation };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { animateVisualElement } from './animation.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { AnimationType } from './types.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\nconst variantPriorityOrder = [\n    AnimationType.Animate,\n    AnimationType.InView,\n    AnimationType.Focus,\n    AnimationType.Hover,\n    AnimationType.Tap,\n    AnimationType.Drag,\n    AnimationType.Exit,\n];\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    const state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (acc, definition) => {\n        const resolved = resolveVariant(visualElement, definition);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(options, changedActiveType) {\n        const props = visualElement.getProps();\n        const context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined ? props[type] : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */\n                    if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                        if (!shallowCompare(next, prev) || variantDidChange) {\n                            markToAnimate(key);\n                        }\n                        else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */\n                            typeState.protectedKeys[key] = true;\n                        }\n                    }\n                    else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */\n            if (shouldAnimateType && !isInherited) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type, ...options },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation[key] = fallbackTarget;\n                }\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            props.initial === false &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive, options) {\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        if (visualElement.variantChildren) {\n            visualElement.variantChildren.forEach((child) => {\n                child.animationState &&\n                    child.animationState.setActive(type, isActive);\n            });\n        }\n        state[type].isActive = isActive;\n        const animations = animateChanges(options, type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        [AnimationType.Animate]: createTypeState(true),\n        [AnimationType.InView]: createTypeState(),\n        [AnimationType.Hover]: createTypeState(),\n        [AnimationType.Tap]: createTypeState(),\n        [AnimationType.Drag]: createTypeState(),\n        [AnimationType.Focus]: createTypeState(),\n        [AnimationType.Exit]: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState, variantPriorityOrder };\n","import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */\n    constructor(node) {\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        this.unmount();\n        if (isAnimationControls(animate)) {\n            this.unmount = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n    mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() { }\n}\n\nexport { AnimationFeature };\n","import { AnimationType } from '../../../render/utils/types.mjs';\nimport { Feature } from '../Feature.mjs';\n\nlet id = 0;\nclass ExitAnimationFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.id = id++;\n    }\n    update() {\n        if (!this.node.presenceContext)\n            return;\n        const { isPresent, onExitComplete, custom } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(AnimationType.Exit, !isPresent, { custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom });\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(() => onExitComplete(this.id));\n        }\n    }\n    mount() {\n        const { register } = this.node.presenceContext || {};\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() { }\n}\n\nexport { ExitAnimationFeature };\n","import { AnimationFeature } from './animation/index.mjs';\nimport { ExitAnimationFeature } from './animation/exit.mjs';\n\nconst animations = {\n    animation: {\n        Feature: AnimationFeature,\n    },\n    exit: {\n        Feature: ExitAnimationFeature,\n    },\n};\n\nexport { animations };\n","const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { extractEventInfo } from '../../events/event-info.mjs';\nimport { sync, cancelSync } from '../../frameloop/index.mjs';\nimport { secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\nimport { frameData } from '../../frameloop/data.mjs';\nimport { isPrimaryPointer } from '../../events/utils/is-primary-pointer.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            sync.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const { onEnd, onSessionEnd } = this.handlers;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(window, \"pointermove\", this.handlePointerMove), addPointerEvent(window, \"pointerup\", this.handlePointerUp), addPointerEvent(window, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelSync.update(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1000;\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","import { mix } from '../../utils/mix.mjs';\n\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target = 0, maxDistance = 0.01) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mix(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale))\n        delta.scale = 1;\n    delta.translate =\n        mix(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate) || isNaN(delta.translate))\n        delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","import { progress } from '../../../utils/progress.mjs';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { mix } from '../../../utils/mix.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","const createAxisDelta = () => ({\n    translate: 0,\n    scale: 1,\n    origin: 0,\n    originPoint: 0,\n});\nconst createDelta = () => ({\n    x: createAxisDelta(),\n    y: createAxisDelta(),\n});\nconst createAxis = () => ({ min: 0, max: 0 });\nconst createBox = () => ({\n    x: createAxis(),\n    y: createAxis(),\n});\n\nexport { createAxis, createAxisDelta, createBox, createDelta };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */\nfunction convertBoundingBoxToBox({ top, left, right, bottom, }) {\n    return {\n        x: { min: left, max: right },\n        y: { min: top, max: bottom },\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return { top: y.min, right: x.max, bottom: y.max, left: x.min };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */\nfunction transformBoxPoints(point, transformPoint) {\n    if (!transformPoint)\n        return point;\n    const topLeft = transformPoint({ x: point.left, y: point.top });\n    const bottomRight = transformPoint({ x: point.right, y: point.bottom });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x,\n    };\n}\n\nexport { convertBoundingBoxToBox, convertBoxToBoundingBox, transformBoxPoints };\n","function isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return (!isIdentityScale(scale) ||\n        !isIdentityScale(scaleX) ||\n        !isIdentityScale(scaleY));\n}\nfunction hasTransform(values) {\n    return (hasScale(values) ||\n        has2DTranslate(values) ||\n        values.z ||\n        values.rotate ||\n        values.rotateX ||\n        values.rotateY);\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\nexport { has2DTranslate, hasScale, hasTransform };\n","import { mix } from '../../utils/mix.mjs';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */\n        const instance = node.instance;\n        if (instance &&\n            instance.style &&\n            instance.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    treeScale.x = snapToDefault(treeScale.x);\n    treeScale.y = snapToDefault(treeScale.y);\n}\nfunction snapToDefault(scale) {\n    if (Number.isInteger(scale))\n        return scale;\n    return scale > 1.0000000000001 || scale < 0.999999999999 ? scale : 1;\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, transforms, [key, scaleKey, originKey]) {\n    const axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n    const originPoint = mix(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform, xKeys);\n    transformAxis(box.y, transform, yKeys);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n","import { convertBoundingBoxToBox, transformBoxPoints } from '../geometry/conversion.mjs';\nimport { translateAxis } from '../geometry/delta-apply.mjs';\n\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\nexport { measurePageBox, measureViewportBox };\n","import { invariant } from 'hey-listen';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, calcOrigin } from './utils/constraints.mjs';\nimport { AnimationType } from '../../render/utils/types.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { createMotionValueAnimation } from '../../animation/index.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            onDragStart && onDragStart(event, info);\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(AnimationType.Drag, true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n        }, { transformPagePoint: this.visualElement.getTransformPagePoint() });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        onDragEnd && onDragEnd(event, info);\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        animationState && animationState.setActive(AnimationType.Drag, false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        const { dragConstraints, dragElastic } = this.getProps();\n        const { layout } = this.visualElement.projection || {};\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start(createMotionValueAnimation(axis, axisValue, 0, transition));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mix(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mix(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = noop;\n        this.removeListeners = noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nexport { DragGesture };\n","import { PanSession } from './PanSession.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\n\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), { transformPagePoint: this.node.getTransformPagePoint() });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: onPanSessionStart,\n            onStart: onPanStart,\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                onPanEnd && onPanEnd(event, info);\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n","import { useContext, useId, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => register(id), []);\n    const safeToRemove = () => onExitComplete && onExitComplete(id);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","import { px } from '../../value/types/numbers/units.mjs';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { invariant } from 'hey-listen';\n\nfunction isCSSVariable(value) {\n    return typeof value === \"string\" && value.startsWith(\"var(--\");\n}\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nconst cssVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    const match = cssVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    const [, token, fallback] = match;\n    return [token, fallback];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        return resolved.trim();\n    }\n    else if (isCSSVariable(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    }\n    else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, { ...target }, transitionEnd) {\n    const element = visualElement.current;\n    if (!(element instanceof Element))\n        return { target, transitionEnd };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = { ...transitionEnd };\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.values.forEach((value) => {\n        const current = value.get();\n        if (!isCSSVariable(current))\n            return;\n        const resolved = getVariableValue(current, element);\n        if (resolved)\n            value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for (const key in target) {\n        const current = target[key];\n        if (!isCSSVariable(current))\n            continue;\n        const resolved = getVariableValue(current, element);\n        if (!resolved)\n            continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd && transitionEnd[key] === undefined) {\n            transitionEnd[key] = current;\n        }\n    }\n    return { target, transitionEnd };\n}\n\nexport { cssVariableRegex, parseCSSVariable, resolveCSSVariables };\n","import { cssVariableRegex } from '../../render/dom/utils/css-variables-conversion.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst varToken = \"_$css\";\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        /**\n         * We need to first strip and store CSS variables from the string.\n         */\n        const containsCSSVariables = latest.includes(\"var(\");\n        const cssVariables = [];\n        if (containsCSSVariables) {\n            latest = latest.replace(cssVariableRegex, (match) => {\n                cssVariables.push(match);\n                return varToken;\n            });\n        }\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mix(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        let output = template(shadow);\n        if (containsCSSVariables) {\n            let i = 0;\n            output = output.replace(varToken, () => {\n                const cssVariable = cssVariables[i];\n                i++;\n                return cssVariable;\n            });\n        }\n        return output;\n    },\n};\n\nexport { correctBoxShadow };\n","import { sync } from '../../../frameloop/index.mjs';\nimport React__default, { useContext } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\n\nclass MeasureLayoutWithContext extends React__default.Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                sync.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            if (!projection.currentAnimation && projection.isLead()) {\n                this.safeToRemove();\n            }\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (React__default.createElement(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","import { createMotionValueAnimation } from './index.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\n\n/**\n * Animate a single value or a `MotionValue`.\n *\n * The first argument is either a `MotionValue` to animate, or an initial animation value.\n *\n * The second is either a value to animate to, or an array of keyframes to animate through.\n *\n * The third argument can be either tween or spring options, and optional lifecycle methods: `onUpdate`, `onPlay`, `onComplete`, `onRepeat` and `onStop`.\n *\n * Returns `AnimationPlaybackControls`, currently just a `stop` method.\n *\n * ```javascript\n * const x = useMotionValue(0)\n *\n * useEffect(() => {\n *   const controls = animate(x, 100, {\n *     type: \"spring\",\n *     stiffness: 2000,\n *     onComplete: v => {}\n *   })\n *\n *   return controls.stop\n * })\n * ```\n *\n * @public\n */\nfunction animate(from, to, transition = {}) {\n    const value = isMotionValue(from) ? from : motionValue(from);\n    value.start(createMotionValueAnimation(\"\", value, to, transition));\n    return {\n        stop: () => value.stop(),\n        isAnimating: () => value.isAnimating(),\n    };\n}\n\nexport { animate };\n","import { circOut } from '../../easing/circ.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { percent, px } from '../../value/types/numbers/units.mjs';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mix(0, \n        // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = mix(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mix(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mix(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mix(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = compress(0, 0.5, circOut);\nconst easeCrossfadeOut = compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n\nexport { copyAxisInto, copyBoxInto };\n","import { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mix(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n    return (a.x.min === b.x.min &&\n        a.x.max === b.x.max &&\n        a.y.min === b.y.min &&\n        a.y.max === b.y.max);\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\n\nexport { aspectRatio, boxEquals, isDeltaZero };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    if (xTranslate || yTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { rotate, rotateX, rotateY } = latestTransform;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { cancelSync, flushSync, sync } from '../../frameloop/index.mjs';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mix } from '../../utils/mix.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(elementId, latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            this.isTransformDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this or any\n             * child might need recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.elementId = elementId;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            elementId && this.root.registerPotentialNode(elementId, this);\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        registerPotentialNode(elementId, node) {\n            this.potentialNodes.set(elementId, node);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = false) {\n            if (this.instance)\n                return;\n            this.isSVG =\n                instance instanceof SVGElement && instance.tagName !== \"svg\";\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            this.elementId && this.root.potentialNodes.delete(this.elementId);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEquals(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged &&\n                            this.animationProgress === 0) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelSync.preRender(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        // Note: Currently only running on root node\n        didUpdate() {\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */\n            if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            flushSync.update();\n            flushSync.preRender();\n            flushSync.render();\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            sync.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            sync.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        /**\n         *\n         */\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.isProjectionDirty = true;\n            this.root.scheduleUpdateProjection();\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        /**\n         * Frame calculations\n         */\n        resolveTargetDelta() {\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            if (!this.isProjectionDirty && !this.attemptToResolveRelativeTarget)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent && relativeParent.layout) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if ((this.parent.relativeTarget ||\n                this.parent.targetDelta ||\n                this.parent.options.layoutRoot) &&\n                this.parent.layout) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        calcProjection() {\n            const { isProjectionDirty, isTransformDirty } = this;\n            this.isProjectionDirty = this.isTransformDirty = false;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            if (isProjectionDirty)\n                canSkip = false;\n            if (isShared && isTransformDirty)\n                canSkip = false;\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            const { target } = lead;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelSync.update(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = sync.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animate(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Propagate isProjectionDirty. Nodes are ordered by depth, so if the parent here\n     * is dirty we can simply pass this forward.\n     */\n    node.isProjectionDirty || (node.isProjectionDirty = Boolean(node.parent && node.parent.isProjectionDirty));\n    /**\n     * Propagate isTransformDirty.\n     */\n    node.isTransformDirty || (node.isTransformDirty = Boolean(node.parent && node.parent.isTransformDirty));\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction mountNodeEarly(node, elementId) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */\n    let searchNode = node.root;\n    for (let i = node.path.length - 1; i >= 0; i--) {\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    const element = searchElement.querySelector(`[data-projection-id=\"${elementId}\"]`);\n    if (element)\n        node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode(0, {});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { DragGesture } from '../../gestures/drag/index.mjs';\nimport { PanGesture } from '../../gestures/pan/index.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { drag };\n","import { isKeyframesTarget } from '../../../animation/utils/is-keyframes-target.mjs';\nimport { invariant } from 'hey-listen';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\nimport { findDimensionValueType } from '../value-types/dimensions.mjs';\nimport { isBrowser } from '../../../utils/is-browser.mjs';\nimport { number } from '../../../value/types/numbers/index.mjs';\nimport { px } from '../../../value/types/numbers/units.mjs';\n\nconst positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n]);\nconst isPositionalKey = (key) => positionalKeys.has(key);\nconst hasPositionalKey = (target) => {\n    return Object.keys(target).some(isPositionalKey);\n};\nconst isNumOrPxType = (v) => v === number || v === px;\nvar BoundingBoxDimension;\n(function (BoundingBoxDimension) {\n    BoundingBoxDimension[\"width\"] = \"width\";\n    BoundingBoxDimension[\"height\"] = \"height\";\n    BoundingBoxDimension[\"left\"] = \"left\";\n    BoundingBoxDimension[\"right\"] = \"right\";\n    BoundingBoxDimension[\"top\"] = \"top\";\n    BoundingBoxDimension[\"bottom\"] = \"bottom\";\n})(BoundingBoxDimension || (BoundingBoxDimension = {}));\nconst getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {\n    if (transform === \"none\" || !transform)\n        return 0;\n    const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        const matrix = transform.match(/^matrix\\((.+)\\)$/);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n};\nconst transformKeys = new Set([\"x\", \"y\", \"z\"]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n    const removedTransforms = [];\n    nonTranslationalTransformKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length)\n        visualElement.render();\n    return removedTransforms;\n}\nconst positionalValues = {\n    // Dimensions\n    width: ({ x }, { paddingLeft = \"0\", paddingRight = \"0\" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),\n    height: ({ y }, { paddingTop = \"0\", paddingBottom = \"0\" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),\n    top: (_bbox, { top }) => parseFloat(top),\n    left: (_bbox, { left }) => parseFloat(left),\n    bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),\n    right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\nconst convertChangedValueTypes = (target, visualElement, changedKeys) => {\n    const originBbox = visualElement.measureViewportBox();\n    const element = visualElement.current;\n    const elementComputedStyle = getComputedStyle(element);\n    const { display } = elementComputedStyle;\n    const origin = {};\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    /**\n     * Record origins before we render and update styles\n     */\n    changedKeys.forEach((key) => {\n        origin[key] = positionalValues[key](originBbox, elementComputedStyle);\n    });\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.render();\n    const targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach((key) => {\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        const value = visualElement.getValue(key);\n        value && value.jump(origin[key]);\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nconst checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {}) => {\n    target = { ...target };\n    transitionEnd = { ...transitionEnd };\n    const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    let removedTransformValues = [];\n    let hasAttemptedToRemoveTransformValues = false;\n    const changedValueTypeKeys = [];\n    targetPositionalKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key))\n            return;\n        let from = origin[key];\n        let fromType = findDimensionValueType(from);\n        const to = target[key];\n        let toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if (isKeyframesTarget(to)) {\n            const numKeyframes = to.length;\n            const fromIndex = to[0] === null ? 1 : 0;\n            from = to[fromIndex];\n            fromType = findDimensionValueType(from);\n            for (let i = fromIndex; i < numKeyframes; i++) {\n                if (!toType) {\n                    toType = findDimensionValueType(to[i]);\n                    invariant(toType === fromType ||\n                        (isNumOrPxType(fromType) && isNumOrPxType(toType)), \"Keyframes must be of the same dimension as the current value\");\n                }\n                else {\n                    invariant(findDimensionValueType(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        }\n        else {\n            toType = findDimensionValueType(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                const current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                }\n                else if (Array.isArray(to) && toType === px) {\n                    target[key] = to.map(parseFloat);\n                }\n            }\n            else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) &&\n                (toType === null || toType === void 0 ? void 0 : toType.transform) &&\n                (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                }\n                else {\n                    target[key] = fromType.transform(to);\n                }\n            }\n            else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues =\n                        removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] =\n                    transitionEnd[key] !== undefined\n                        ? transitionEnd[key]\n                        : target[key];\n                value.jump(to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        const scrollY = changedValueTypeKeys.indexOf(\"height\") >= 0\n            ? window.pageYOffset\n            : null;\n        const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(([key, value]) => {\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.render();\n        // Restore scroll position\n        if (isBrowser && scrollY !== null) {\n            window.scrollTo({ top: scrollY });\n        }\n        return { target: convertedTarget, transitionEnd };\n    }\n    else {\n        return { target, transitionEnd };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */\nfunction unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target)\n        ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd)\n        : { target, transitionEnd };\n}\n\nexport { BoundingBoxDimension, positionalValues, unitConversion };\n","import { resolveCSSVariables } from './css-variables-conversion.mjs';\nimport { unitConversion } from './unit-conversion.mjs';\n\n/**\n * Parse a DOM variant to make it animatable. This involves resolving CSS variables\n * and ensuring animations like \"20%\" => \"calc(50vw)\" are performed in pixels.\n */\nconst parseDomVariant = (visualElement, target, origin, transitionEnd) => {\n    const resolved = resolveCSSVariables(visualElement, target, transitionEnd);\n    target = resolved.target;\n    transitionEnd = resolved.transitionEnd;\n    return unitConversion(visualElement, target, origin, transitionEnd);\n};\n\nexport { parseDomVariant };\n","// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nconst hasReducedMotionListener = { current: false };\n\nexport { hasReducedMotionListener, prefersReducedMotion };\n","import { isBrowser } from '../is-browser.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n\nexport { initPrefersReducedMotion };\n","import { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    const { willChange } = next;\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */\n            if (process.env.NODE_ENV === \"development\") {\n                warnOnce(nextValue.version === \"9.0.4\", `Attempting to mix Framer Motion versions ${nextValue.version} with 9.0.4 may not work as expected.`);\n            }\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.remove(key);\n            }\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","import { sync, cancelSync } from '../frameloop/index.mjs';\nimport { warning, invariant } from 'hey-listen';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    constructor({ parent, props, presenceContext, reducedMotionConfig, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = () => sync.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps) {\n        return {};\n    }\n    mount(instance) {\n        this.current = instance;\n        if (this.projection) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        this.projection && this.projection.unmount();\n        cancelSync.update(this.notifyUpdate);\n        cancelSync.render(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            this.features[key].unmount();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate &&\n                sync.update(this.notifyUpdate, false, true);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, projectionId, initialLayoutGroupConfig) {\n        let ProjectionNodeConstructor;\n        let MeasureLayout;\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (process.env.NODE_ENV !== \"production\" &&\n            preloadedFeatures &&\n            isStrict) {\n            const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n            renderedProps.ignoreStrict\n                ? warning(false, strictMessage)\n                : invariant(false, strictMessage);\n        }\n        for (let i = 0; i < numFeatures; i++) {\n            const name = featureNames[i];\n            const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent, } = featureDefinitions[name];\n            if (ProjectionNode)\n                ProjectionNodeConstructor = ProjectionNode;\n            if (isEnabled(renderedProps)) {\n                if (!this.features[name] && FeatureConstructor) {\n                    this.features[name] = new FeatureConstructor(this);\n                }\n                if (MeasureLayoutComponent) {\n                    MeasureLayout = MeasureLayoutComponent;\n                }\n            }\n        }\n        if (!this.projection && ProjectionNodeConstructor) {\n            this.projection = new ProjectionNodeConstructor(projectionId, this.latestValues, this.parent && this.parent.projection);\n            const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = renderedProps;\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) ||\n                    (dragConstraints && isRefObject(dragConstraints)),\n                visualElement: this,\n                scheduleRender: () => this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */\n                animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n                layoutRoot,\n            });\n        }\n        return MeasureLayout;\n    }\n    updateFeatures() {\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature.isMounted) {\n                feature.update(this.props, this.prevProps);\n            }\n            else {\n                feature.mount();\n                feature.isMounted = true;\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */\n    makeTargetAnimatable(target, canMutate = true) {\n        return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listener = props[\"on\" + key];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    getVariantContext(startAtParent = false) {\n        if (startAtParent) {\n            return this.parent ? this.parent.getVariantContext() : undefined;\n        }\n        if (!this.isControllingVariants) {\n            const context = this.parent\n                ? this.parent.getVariantContext() || {}\n                : {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        if (value !== this.values.get(key)) {\n            this.removeValue(key);\n            this.bindToMotionValue(key, value);\n        }\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key) {\n        return this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : this.readValueFromInstance(this.current, key, this.options);\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\"\n            ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key]\n            : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\nconst variantProps = [\"initial\", ...variantPriorityOrder];\nconst numVariantProps = variantProps.length;\n\nexport { VisualElement };\n","import { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { parseDomVariant } from './utils/parse-dom-variant.mjs';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style ? props.style[key] : undefined;\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, { transformValues }, isMounted) {\n        let origin = getOrigin(target, transition || {}, this);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(this, target, origin);\n            const parsed = parseDomVariant(this, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return {\n            transition,\n            transitionEnd,\n            ...target,\n        };\n    }\n}\n\nexport { DOMVisualElement };\n","import { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariable } from '../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariable(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, options, props) {\n        buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest) => {\n                if (this.current)\n                    this.current.textContent = `${latest}`;\n            });\n        }\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderHTML(instance, renderState, styleProp, projection);\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n","import { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.isSVGTag = false;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    measureInstanceViewportBox() {\n        return createBox();\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    build(renderState, latestValues, options, props) {\n        buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n","import { HTMLVisualElement } from '../html/HTMLVisualElement.mjs';\nimport { SVGVisualElement } from '../svg/SVGVisualElement.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new SVGVisualElement(options, { enableHardwareAcceleration: false })\n        : new HTMLVisualElement(options, { enableHardwareAcceleration: true });\n};\n\nexport { createDomVisualElement };\n","import { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { layout };\n","import { createMotionComponent } from '../../motion/index.mjs';\nimport { createMotionProxy } from './motion-proxy.mjs';\nimport { createDomMotionConfig } from './utils/create-config.mjs';\nimport { gestureAnimations } from '../../motion/features/gestures.mjs';\nimport { animations } from '../../motion/features/animations.mjs';\nimport { drag } from '../../motion/features/drag.mjs';\nimport { createDomVisualElement } from './create-visual-element.mjs';\nimport { layout } from '../../motion/features/layout.mjs';\n\nconst preloadedFeatures = {\n    ...animations,\n    ...gestureAnimations,\n    ...drag,\n    ...layout,\n};\n/**\n * HTML & SVG components, optimised for use with gestures and animation. These can be used as\n * drop-in replacements for any HTML & SVG component, all CSS & SVG properties are supported.\n *\n * @public\n */\nconst motion = /*@__PURE__*/ createMotionProxy((Component, config) => createDomMotionConfig(Component, config, preloadedFeatures, createDomVisualElement));\n/**\n * Create a DOM `motion` component with the provided string. This is primarily intended\n * as a full alternative to `motion` for consumers who have to support environments that don't\n * support `Proxy`.\n *\n * ```javascript\n * import { createDomMotionComponent } from \"framer-motion\"\n *\n * const motion = {\n *   div: createDomMotionComponent('div')\n * }\n * ```\n *\n * @public\n */\nfunction createDomMotionComponent(key) {\n    return createMotionComponent(createDomMotionConfig(key, { forwardMotionProps: false }, preloadedFeatures, createDomVisualElement));\n}\n\nexport { createDomMotionComponent, motion };\n","const isBrowser = typeof document !== \"undefined\";\n\nexport { isBrowser };\n","import { useRef } from 'react';\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nfunction useConstant(init) {\n    const ref = useRef(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n\nexport { useConstant };\n","import { useLayoutEffect, useEffect } from 'react';\nimport { isBrowser } from './is-browser.mjs';\n\nconst useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\n\nexport { useIsomorphicLayoutEffect };\n"],"names":["LayoutGroupContext","react__WEBPACK_IMPORTED_MODULE_0__","createContext","PresenceContext","frameData","delta","timestamp","defaultTimestep","getCurrentTime","performance","now","Date","onNextFrame","window","requestAnimationFrame","callback","setTimeout","useDefaultElapsed","runNextFrame","isProcessing","stepsOrder","steps","reduce","acc","key","createRenderStep","toRun","toRunNextFrame","numToRun","flushNextFrame","toKeepAlive","WeakSet","step","schedule","keepAlive","immediate","addToCurrentFrame","buffer","add","indexOf","push","length","cancel","index","splice","delete","process","i","has","sync","startLoop","cancelSync","flushSync","data","w","processStep","stepId","processFrame","Math","max","min","forEach","isValidProp","AnimationType","BoundingBoxDimension","MotionConfigContext","react","transformPagePoint","p","isStatic","reducedMotion","MotionContext","LazyContext","strict","isRefObject","ref","Object","prototype","hasOwnProperty","call","isVariantLabel","v","Array","isArray","isAnimationControls","start","variantProps","isControllingVariants","props","animate","some","name","isVariantNode","Boolean","variants","variantLabelsAsDependency","prop","join","featureProps","animation","exit","drag","focus","hover","tap","pan","inView","layout","featureDefinitions","isEnabled","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","id","SwitchLayoutGroupContext","motionComponentSymbol","Symbol","for","lowercaseSVGElements","isSVGComponent","Component","includes","test","scaleCorrectors","transformPropOrder","transformProps","Set","isForcedMotionValue","layoutId","startsWith","undefined","isMotionValue","value","getVelocity","translateAlias","x","y","z","transformPerspective","numTransforms","isCSSVariable","getValueAsType","type","transform","clamp","number","parse","parseFloat","alpha","scale","default","sanitize","round","floatRegex","colorRegex","singleColorRegex","isString","createUnitType","endsWith","unit","split","degrees","percent","px","vh","vw","progressPercentage","type_int_int","numberValueTypes","borderWidth","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderRadius","radius","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","width","maxWidth","height","maxHeight","size","top","right","bottom","left","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","margin","marginTop","marginRight","marginBottom","marginLeft","rotate","rotateX","rotateY","rotateZ","scaleX","scaleY","scaleZ","skew","skewX","skewY","distance","translateX","translateY","translateZ","perspective","opacity","originX","originY","originZ","zIndex","fillOpacity","strokeOpacity","numOctaves","buildHTMLStyles","state","latestValues","options","transformTemplate","style","vars","transformOrigin","hasTransform","hasTransformOrigin","transformIsNone","valueType","valueAsType","buildTransform","enableHardwareAcceleration","allowTransformNone","transformIsDefault","transformString","transformName","trim","createHtmlRenderState","copyRawValuesOnly","target","source","useHTMLProps","visualState","htmlProps","useStyle","styleProp","assign","useInitialMotionValues","useMemo","transformValues","dragListener","draggable","userSelect","WebkitUserSelect","WebkitTouchCallout","touchAction","tabIndex","onTap","onTapStart","whileTap","validMotionProps","isValidMotionProp","shouldForward","require","_a","calcOrigin","origin","offset","dashKeys","array","camelKeys","buildSVGAttrs","attrX","attrY","pathLength","pathSpacing","pathOffset","latest","isSVGTag","viewBox","attrs","dimensions","calcSVGTransformOrigin","pxOriginX","pxOriginY","buildSVGPath","spacing","useDashCase","keys","createSvgRenderState","tag","toLowerCase","useSVGProps","_isStatic","visualProps","rawStyles","camelToDash","str","replace","renderHTML","element","projection","getProjectionStyles","setProperty","camelCaseAttributes","renderSVG","renderState","_styleProp","setAttribute","scrapeMotionValuesFromProps","prevProps","newValues","scrape_motion_values_scrapeMotionValuesFromProps","targetKey","toUpperCase","resolveVariantFromProps","definition","custom","currentValues","currentVelocity","isKeyframesTarget","isCustomValue","mix","toValue","resolveFinalValueInKeyframes","resolveMotionValue","unwrappedValue","get","makeUseVisualState","context","useContext","presenceContext","context_PresenceContext","O","make","makeState","createRenderState","onMount","makeLatestValues","scrapeMotionValues","values","motionValues","initial","isControllingVariants$1","isVariantNode$1","inherit","isInitialAnimationBlocked","variantToSet","list","resolved","transitionEnd","transition","valueTarget","mount","instance","config","use_constant","h","svgMotionConfig","useVisualState","getBBox","getBoundingClientRect","e","tagName","htmlMotionConfig","addDomEvent","eventName","handler","passive","addEventListener","removeEventListener","isPrimaryPointer","event","pointerType","button","isPrimary","extractEventInfo","pointType","point","addPointerInfo","addPointerEvent","combineFunctions","a","b","pipe","transformers","createLock","lock","openLock","globalHorizontalLock","globalVerticalLock","getGlobalLock","openHorizontal","openVertical","isDragActive","openGestureLock","Feature","constructor","node","isMounted","update","addHoverEvent","isActive","callbackName","handleEvent","info","getProps","animationState","whileHover","setActive","Hover","current","isNodeOrChild","parent","child","parentElement","noop","any","fireSyntheticPointerEvent","syntheticPointerEvent","PointerEvent","observerCallbacks","WeakMap","observers","fireObserverCallback","entry","fireAllObserverCallbacks","entries","thresholdNames","all","shallowCompare","next","prev","prevLength","isNumericalString","isZeroValueString","addUniqueItem","arr","item","removeItem","SubscriptionManager","subscriptions","notify","c","numSubscriptions","getSize","clear","velocityPerSecond","velocity","frameDuration","isFloat","isNaN","MotionValue","init","version","timeDelta","lastUpdated","canTrackVelocity","events","updateAndNotify","render","frameloop","Z_","postRender","scheduleVelocityCheck","change","velocityChange","renderRequest","velocityCheck","hasAnimated","owner","onChange","subscription","on","unsubscribe","read","stop","clearListeners","eventManagers","attach","passiveEffect","stopPassiveEffect","set","setWithVelocity","jump","getPrevious","startAnimation","Promise","resolve","animationStart","then","animationComplete","clearAnimation","animationCancel","isAnimating","destroy","motionValue","isColorString","testProp","splitColor","aName","bName","cName","match","clampRgbUnit","rgbUnit","rgba","red","green","blue","alpha$1","hex","r","g","substring","parseInt","hsla","hue","saturation","lightness","color","colorToken","numberToken","analyseComplexValue","numColors","numNumbers","colors","map","numbers","tokenised","createTransformer","numValues","output","convertNumbersToZero","complex","_b","getAnimatableNone","parsed","transformer","maxDefaults","applyDefaultFilter","slice","defaultValue","functionRegex","filter","functions","defaultValueTypes","backgroundColor","outlineColor","fill","stroke","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","WebkitFilter","getDefaultValueType","animatable_none_getAnimatableNone","defaultValueType","testValueType","dimensionValueTypes","findDimensionValueType","find","valueTypes","findValueType","resolveVariant","visualElement","getCurrent","isWillChangeMotionValue","optimizedAppearDataAttribute","warning","invariant","secondsToMilliseconds","seconds","instantAnimationState","mirrorEasing","easing","reverseEasing","easeIn","easeOut","easeInOut","from","to","progress","hueToRgb","q","t","mixLinearColor","fromExpo","sqrt","colorTypes","getColorType","asRGBA","model","hslaToRgba","mixColor","fromRGBA","toRGBA","blended","getMixer","mixComplex","mixArray","blendValue","fromThis","mixObject","template","originStats","targetStats","canInterpolate","toFromDifference","mixNumber","interpolate","input","isClamp","ease","mixer","inputLength","reverse","mixers","createMixers","customMixer","mixerFactory","detectMixerFactory","numMixers","easingFunction","interpolator","progressInRange","calcBezier","a1","a2","cubicBezier","mX1","mY1","mX2","mY2","getTForX","binarySubdivide","lowerBound","upperBound","currentX","currentT","abs","aX","circIn","sin","acos","circOut","circInOut","backOut","backIn","backInOut","anticipate","pow","easingLookup","linear","easingDefinitionToFunction","x1","y1","x2","y2","isEasingArray","keyframes","keyframeValues","times","duration","easingFunctions","done","absoluteTimes","defaultOffset","_value","o","createInterpolator","flipTarget","calcAngularFreq","undampedFreq","dampingRatio","durationKeys","physicsKeys","isSpringType","spring","restDelta","restSpeed","stiffness","damping","mass","isResolvedFromDuration","getSpringOptions","springOptions","derived","findSpring","bounce","envelope","derivative","maxDuration","exponentialDecay","safeMin","exp","factor","d","f","initialGuess","approximateRoot","result","resolveSpring","zero","initialVelocity","createSpring","initialDelta","undampedAngularFreq","isGranularScale","angularFreq","cos","dampedAngularFreq","freqForT","sinh","cosh","prevT","isBelowVelocityThreshold","isBelowDisplacementThreshold","needsInterpolation","types","decay","power","timeConstant","modifyTarget","amplitude","ideal","tween","loopElapsed","elapsed","delay","framesync","passTimestamp","qY","driver","repeat","repeatMax","repeatType","repeatDelay","keyframes$1","autoplay","onPlay","onStop","onComplete","onRepeat","onUpdate","driverControls","interpolateFromNumber","initialElapsed","repeatCount","computedDuration","isComplete","isForwardPlayback","animator","hasRepeatDelayElapsed","reverseElapsed","currentTime","sample","sampleResolution","sampleElapsed","remaining","cubicBezierAsString","supportedWaapiEasing","featureTests","waapi","Element","results","supports","acceleratedValues","timeout","checkElapsed","underDampedSpring","criticallyDampedSpring","linearTween","keyframesTransition","defaultTransitions","getDefaultTransition","valueKey","factory","isAnimatable","isZero","getZeroUnit","potentialUnitType","getValueTransition","createMotionValueAnimation","valueName","valueTransition","getKeyframes","isTargetAnimatable","originKeyframe","targetKeyframe","isOriginAnimatable","createInstantAnimation","setValue","inertia","bounceStiffness","bounceDamping","currentAnimation","isOutOfBounds","findNearestBoundary","startSpring","boundary","heading","checkBoundary","isTransitionDefined","when","_delay","delayChildren","staggerChildren","staggerDirection","HTMLElement","acceleratedAnimation","createAcceleratedAnimation","canAccelerateAnimation","Infinity","sampleAnimation","pregeneratedKeyframes","animateStyle","mapEasingToNativeEasing","iterations","direction","onfinish","getFinalKeyframe","animateVariant","variant","transitionOverride","getAnimation","animateTarget","getChildAnimations","variantChildren","forwardDelay","animateChildren","animations","maxStaggerDuration","generateStaggerDuration","sort","sortByTreeOrder","first","last","makeTargetAnimatable","willChange","getValue","animationTypeState","getState","shouldBlockAnimation","protectedKeys","needsAnimating","shouldBlock","HandoffAppearAnimations","appearId","shouldReduceMotion","remove","setTarget","hasValue","addValue","sortNodePosition","variantPriorityOrder","Animate","InView","Focus","Tap","Drag","Exit","reversePriorityOrder","numAnimationTypes","createTypeState","prevResolvedValues","exit_id","PanSession","handlers","startEvent","lastMoveEvent","lastMoveEventInfo","updatePoint","getPanInfo","history","isPanStarted","isDistancePastThreshold","distance2D","xDelta","yDelta","onStart","onMove","handlePointerMove","transformPoint","handlePointerUp","end","onEnd","onSessionEnd","panInfo","initialInfo","onSessionStart","removeListeners","updateHandlers","subtractPoint","lastDevicePoint","PanSession_getVelocity","timestampedPoint","lastPoint","time","calcLength","axis","isNear","maxDistance","calcAxisDelta","originPoint","translate","calcBoxDelta","calcRelativeAxis","relative","calcRelativeAxisPosition","calcRelativePosition","calcRelativeAxisConstraints","calcViewportAxisConstraints","layoutAxis","constraintsAxis","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","createAxisDelta","createDelta","createAxis","createBox","eachAxis","convertBoundingBoxToBox","isIdentityScale","hasScale","has2DTranslate","is2DTranslate","applyPointDelta","boxScale","scalePoint","applyAxisDelta","applyBoxDelta","box","snapToDefault","isInteger","translateAxis","transformAxis","transforms","scaleKey","originKey","axisOrigin","xKeys","yKeys","transformBox","measureViewportBox","transformBoxPoints","topLeft","bottomRight","elementDragControls","VisualElementDragControls","openGlobalLock","isDragging","currentDirection","constraints","hasMutatedConstraints","elastic","originEvent","snapToCursor","isPresent","stopAnimation","dragPropagation","onDragStart","resolveConstraints","isAnimationBlocked","getAxisMotionValue","measuredAxis","layoutBox","dragDirectionLock","onDirectionLock","onDrag","getCurrentDirection","lockThreshold","updateAxis","panSession","getTransformPagePoint","onDragEnd","_point","shouldDrag","axisValue","applyConstraints","dragConstraints","prevConstraints","resolveRefConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","relativeConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","measurePageBox","rootProjectionNode","viewportBox","scroll","root","measuredConstraints","userConstraints","convertBoxToBoundingBox","dragMomentum","dragTransition","dragSnapToOrigin","onDragTransitionEnd","momentumAnimations","startAxisValueAnimation","dragKey","externalMotionValue","scalePositionWithinConstraints","boxProgress","constraints_calcOrigin","sourceLength","targetLength","updateScroll","updateLayout","addListeners","stopPointerListener","measureDragConstraints","stopMeasureLayoutListener","stopResizeListener","stopLayoutUpdateListener","hasLayoutChanged","pixelsToPercent","pixels","correctBorderRadius","correct","css_variables_conversion_isCSSVariable","cssVariableRegex","getVariableValue","depth","token","fallback","parseCSSVariable","exec","getComputedStyle","getPropertyValue","varToken","correctBoxShadow","treeScale","projectionDelta","original","containsCSSVariables","cssVariables","shadow","xScale","yScale","averageScale","cssVariable","MeasureLayoutWithContext","componentDidMount","layoutGroup","switchLayoutGroup","defaultScaleCorrectors","group","register","didUpdate","safeToRemove","setOptions","onExitComplete","getSnapshotBeforeUpdate","layoutDependency","willUpdate","promote","relegate","stack","getStack","members","componentDidUpdate","isLead","componentWillUnmount","promoteContext","scheduleCheckAfterUnmount","deregister","MeasureLayout","usePresence","useId","useEffect","createElement","applyTo","boxShadow","borders","numBorders","asNumber","isPx","getRadius","radiusName","easeCrossfadeIn","compress","easeCrossfadeOut","copyAxisInto","originAxis","copyBoxInto","originBox","removePointDelta","removeAxisTransforms","sourceAxis","removeAxisDelta","relativeProgress","delta_remove_xKeys","delta_remove_yKeys","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","boxEquals","aspectRatio","NodeStack","scheduleRender","prevLead","lead","indexOfNode","findIndex","member","preserveFollowOpacity","show","resumeFrom","preserveOpacity","snapshot","animationValues","isUpdating","isLayoutDirty","crossfade","hide","exitAnimationComplete","resumingFrom","removeLeadSnapshot","buildProjectionTransform","latestTransform","xTranslate","yTranslate","elementScaleX","elementScaleY","compareByDepth","FlatTree","children","isDirty","transformAxes","create_projection_node_id","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","elementId","animationId","isTreeAnimating","isTransformDirty","isProjectionDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","eventHandlers","Map","potentialNodes","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","hasProjected","isVisible","animationProgress","sharedNodes","path","registerPotentialNode","notifyListeners","args","subscriptionManager","hasListeners","SVGElement","cancelDelay","resizeUnblockUpdate","finishAnimation","registerSharedNode","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","setAnimationOrigin","animationOptions","unmount","preRender","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","getTransformTemplate","shouldNotifyListeners","prevTransformTemplateValue","updateSnapshot","updateWasBlocked","clearMeasurements","mountNodeEarly","resetTransformStyle","notifyLayoutUpdate","iW","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","phase","needsMeasurement","layoutScroll","isRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","removeElementScroll","roundAxis","measuredBox","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","nodeBox","setTargetDelta","targetDelta","getLead","attemptToResolveRelativeTarget","relativeParent","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isShared","canSkip","pendingAnimation","applyTreeDeltas","treePath","isSharedTransition","treeLength","display","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","snapshotSource","layoutSource","isSharedLayoutAnimation","isOnlyMember","shouldCrossfadeOpacity","hasOpacityCrossfade","mixTargetDelta","mixAxisDelta","mixAxis","mixValues","follow","opacityExit","borderLabel","followRadius","leadRadius","canMix","animate_animate","completeAnimation","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","yLength","initialPromotionConfig","shouldPreserveFollowOpacity","getPrevLead","hasRotate","resetValues","setStaticValue","styles","visibility","pointerEvents","emptyStyles","valuesToRender","corrected","num","resetTree","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","searchNode","searchElement","document","querySelector","DocumentProjectionNode","documentElement","scrollLeft","body","scrollTop","HTMLProjectionNode","documentNode","position","positionalKeys","isPositionalKey","hasPositionalKey","isNumOrPxType","getPosFromMatrix","matrix","pos","getTranslateFromMatrix","pos2","pos3","_bbox","matrix3d","transformKeys","nonTranslationalTransformKeys","positionalValues","convertChangedValueTypes","changedKeys","originBbox","elementComputedStyle","targetBbox","checkAndConvertChangedValueTypes","targetPositionalKeys","removedTransformValues","hasAttemptedToRemoveTransformValues","changedValueTypeKeys","toType","fromType","numKeyframes","fromIndex","removeNonTranslationalTransform","removedTransforms","scrollY","pageYOffset","convertedTarget","is_browser","j","scrollTo","parseDomVariant","resolveCSSVariables","prefersReducedMotion","hasReducedMotionListener","featureNames","numFeatures","propEventHandlers","VisualElement","reducedMotionConfig","features","valueSubscriptions","prevMotionValues","propEventSubscriptions","notifyUpdate","triggerBuild","renderInstance","baseTarget","initialValues","manuallyAnimateOnMount","initialMotionValues","_props","_prevProps","removeFromVariantTree","addVariantChild","bindToMotionValue","initPrefersReducedMotion","matchMedia","motionMediaQuery","setReducedMotionPreferences","matches","addListener","valueIsTransform","removeOnChange","latestValue","removeOnRenderRequest","other","sortInstanceNodePosition","loadFeatures","renderedProps","isStrict","preloadedFeatures","projectionId","initialLayoutGroupConfig","ProjectionNodeConstructor","FeatureConstructor","ProjectionNode","MeasureLayoutComponent","updateFeatures","feature","build","measureInstanceViewportBox","getStaticValue","canMutate","makeTargetAnimatableFromInstance","prevPresenceContext","listener","updateMotionValuesFromProps","nextValue","prevValue","existingValue","removeValue","handleChildMotionValue","getVariant","getClosestVariantNode","getVariantContext","startAtParent","numVariantProps","VisualElement_variantProps","closestVariantNode","removeValueFromRenderState","readValue","readValueFromInstance","setBaseTarget","getBaseTarget","valueFromInitial","getBaseTargetFromProps","DOMVisualElement","compareDocumentPosition","getOrigin","transitionOrigin","getOriginFromTransition","checkTargetForNewValues","newValueKeys","numNewValues","targetValue","HTMLVisualElement","defaultType","computedStyle","childSubscription","textContent","SVGVisualElement","arguments","getAttribute","create_visual_element_createDomVisualElement","createAnimationState","animateVisualElement","resolvedDefinition","isInitialRender","buildResolvedTypeValues","animateChanges","changedActiveType","removedKeys","encounteredKeys","removedVariantIndex","typeState","propIsVariant","activeDelta","isInherited","prevProp","variantDidChange","shouldAnimateType","definitionList","resolvedValues","allKeys","markToAnimate","blockInitialAnimation","fallbackAnimation","fallbackTarget","shouldAnimate","setAnimateFunction","makeAnimator","updateAnimationControlsSubscription","subscribe","prevAnimate","prevIsPresent","exitAnimation","hasEnteredView","isInView","viewportFallback","onViewportEnter","startObserver","viewport","rootMargin","amount","once","IntersectionObserver","threshold","onIntersectionUpdate","isIntersecting","onViewportLeave","observeIntersection","rootInteresectionObserver","initIntersectionObserver","lookupRoot","rootObservers","JSON","stringify","observe","unobserve","hasOptionsChanged","hasViewportOptionChanged","prevViewport","removeStartListeners","removeEndListeners","removeAccessibleListeners","startPointerPress","startInfo","isPressing","endPointerPress","endEvent","endInfo","checkPressEnd","onTapCancel","removePointerUpListener","removePointerCancelListener","cancelEvent","cancelInfo","cancelPress","startPress","startAccessiblePress","handleKeydown","keydownEvent","handleKeyup","keyupEvent","removeKeydownListener","handleBlur","removeBlurListener","removePointerListener","removeFocusListener","onFocus","isFocusVisible","onBlur","removePointerDownListener","onPointerDown","pointerDownEvent","session","createPanHandlers","onPanSessionStart","onPanStart","onPan","onPanEnd","removeGroupControls","controls","dragControls","motion","createMotionProxy","createConfig","customMotionComponentConfig","motion_createMotionComponent","createVisualElement","useRender","ForwardRefComponent","forwardRef","externalRef","configAndProps","useLayoutId","layoutGroupId","useCreateMotionContext","getCurrentTreeVariants","useVisualElement","lazyContext","visualElementRef","useRef","renderer","useInsertionEffect","use_isomorphic_effect","L","useAnimateChangesEffect","Provider","useCallback","Proxy","componentCache","_target","create_config_createDomMotionConfig","forwardMotionProps","baseConfig","createUseRender","useVisualProps","filteredProps","filterProps","isDom","elementProps","renderedChildren","isBrowser","useConstant","useIsomorphicLayoutEffect","_is_browser_mjs__WEBPACK_IMPORTED_MODULE_1__","useLayoutEffect"],"sourceRoot":""}